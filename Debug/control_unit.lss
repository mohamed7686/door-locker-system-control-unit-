
control_unit.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000028be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000028be  00002952  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800068  00800068  0000295a  2**0
                  ALLOC
  3 .stab         0000267c  00000000  00000000  0000295c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000cd3  00000000  00000000  00004fd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005cab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005deb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005f5b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008a8f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000983c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000999c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009c29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a3f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 86 12 	jmp	0x250c	; 0x250c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a8 e6       	ldi	r26, 0x68	; 104
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
      68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
      6a:	aa 36       	cpi	r26, 0x6A	; 106
      6c:	b1 07       	cpc	r27, r17
      6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>

00000070 <__do_copy_data>:
      70:	10 e0       	ldi	r17, 0x00	; 0
      72:	a0 e6       	ldi	r26, 0x60	; 96
      74:	b0 e0       	ldi	r27, 0x00	; 0
      76:	ee eb       	ldi	r30, 0xBE	; 190
      78:	f8 e2       	ldi	r31, 0x28	; 40
      7a:	02 c0       	rjmp	.+4      	; 0x80 <.do_copy_data_start>

0000007c <.do_copy_data_loop>:
      7c:	05 90       	lpm	r0, Z+
      7e:	0d 92       	st	X+, r0

00000080 <.do_copy_data_start>:
      80:	a8 36       	cpi	r26, 0x68	; 104
      82:	b1 07       	cpc	r27, r17
      84:	d9 f7       	brne	.-10     	; 0x7c <.do_copy_data_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 5d 14 	jmp	0x28ba	; 0x28ba <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e1 13 	jmp	0x27c2	; 0x27c2 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fd 13 	jmp	0x27fa	; 0x27fa <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 09 14 	jmp	0x2812	; 0x2812 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 f1 13 	jmp	0x27e2	; 0x27e2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 0d 14 	jmp	0x281a	; 0x281a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:


#include "passwords.h"
uint8 flag2;

int main (void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	0f 92       	push	r0
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
uint8 t;

DDRC |=(1<<buzz);
     b50:	a4 e3       	ldi	r26, 0x34	; 52
     b52:	b0 e0       	ldi	r27, 0x00	; 0
     b54:	e4 e3       	ldi	r30, 0x34	; 52
     b56:	f0 e0       	ldi	r31, 0x00	; 0
     b58:	80 81       	ld	r24, Z
     b5a:	84 60       	ori	r24, 0x04	; 4
     b5c:	8c 93       	st	X, r24
DDRD |=(1<<motor_r)|(1<<motor_l);
     b5e:	a1 e3       	ldi	r26, 0x31	; 49
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e1 e3       	ldi	r30, 0x31	; 49
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	8c 60       	ori	r24, 0x0C	; 12
     b6a:	8c 93       	st	X, r24
SREG |=(1<<7);
     b6c:	af e5       	ldi	r26, 0x5F	; 95
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	ef e5       	ldi	r30, 0x5F	; 95
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	80 68       	ori	r24, 0x80	; 128
     b78:	8c 93       	st	X, r24
UART_init();
     b7a:	0e 94 32 13 	call	0x2664	; 0x2664 <UART_init>

change_password();
     b7e:	0e 94 d6 11 	call	0x23ac	; 0x23ac <change_password>

while(1){

do{
	t=UART_recieveByte();
     b82:	0e 94 63 13 	call	0x26c6	; 0x26c6 <UART_recieveByte>
     b86:	89 83       	std	Y+1, r24	; 0x01
}
while(t !=1 && t!=2);
     b88:	89 81       	ldd	r24, Y+1	; 0x01
     b8a:	81 30       	cpi	r24, 0x01	; 1
     b8c:	19 f0       	breq	.+6      	; 0xb94 <main+0x4e>
     b8e:	89 81       	ldd	r24, Y+1	; 0x01
     b90:	82 30       	cpi	r24, 0x02	; 2
     b92:	b9 f7       	brne	.-18     	; 0xb82 <main+0x3c>

if(t==1){
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	81 30       	cpi	r24, 0x01	; 1
     b98:	a1 f5       	brne	.+104    	; 0xc02 <main+0xbc>
	if(entering_password()==2){
     b9a:	0e 94 68 12 	call	0x24d0	; 0x24d0 <entering_password>
     b9e:	82 30       	cpi	r24, 0x02	; 2
     ba0:	f9 f4       	brne	.+62     	; 0xbe0 <main+0x9a>
		CLEAR_BIT(PORTC,motor_r);
     ba2:	a5 e3       	ldi	r26, 0x35	; 53
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e5 e3       	ldi	r30, 0x35	; 53
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8b 7f       	andi	r24, 0xFB	; 251
     bae:	8c 93       	st	X, r24
		CLEAR_BIT(PORTC,motor_l);
     bb0:	a5 e3       	ldi	r26, 0x35	; 53
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	e5 e3       	ldi	r30, 0x35	; 53
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	87 7f       	andi	r24, 0xF7	; 247
     bbc:	8c 93       	st	X, r24
		SET_BIT(PORTC,buzz);
     bbe:	a5 e3       	ldi	r26, 0x35	; 53
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	e5 e3       	ldi	r30, 0x35	; 53
     bc4:	f0 e0       	ldi	r31, 0x00	; 0
     bc6:	80 81       	ld	r24, Z
     bc8:	84 60       	ori	r24, 0x04	; 4
     bca:	8c 93       	st	X, r24
	    flag2=1;
     bcc:	81 e0       	ldi	r24, 0x01	; 1
     bce:	80 93 69 00 	sts	0x0069, r24
		timer1_init_CTC_mode();
     bd2:	0e 94 04 13 	call	0x2608	; 0x2608 <timer1_init_CTC_mode>
		while(flag2==1){}
     bd6:	80 91 69 00 	lds	r24, 0x0069
     bda:	81 30       	cpi	r24, 0x01	; 1
     bdc:	e1 f3       	breq	.-8      	; 0xbd6 <main+0x90>
     bde:	d1 cf       	rjmp	.-94     	; 0xb82 <main+0x3c>
	}
	else{SET_BIT(PORTC,motor_r);
     be0:	a5 e3       	ldi	r26, 0x35	; 53
     be2:	b0 e0       	ldi	r27, 0x00	; 0
     be4:	e5 e3       	ldi	r30, 0x35	; 53
     be6:	f0 e0       	ldi	r31, 0x00	; 0
     be8:	80 81       	ld	r24, Z
     bea:	84 60       	ori	r24, 0x04	; 4
     bec:	8c 93       	st	X, r24
	CLEAR_BIT(PORTC,motor_l);
     bee:	a5 e3       	ldi	r26, 0x35	; 53
     bf0:	b0 e0       	ldi	r27, 0x00	; 0
     bf2:	e5 e3       	ldi	r30, 0x35	; 53
     bf4:	f0 e0       	ldi	r31, 0x00	; 0
     bf6:	80 81       	ld	r24, Z
     bf8:	87 7f       	andi	r24, 0xF7	; 247
     bfa:	8c 93       	st	X, r24
	timer1_init_CTC_mode();
     bfc:	0e 94 04 13 	call	0x2608	; 0x2608 <timer1_init_CTC_mode>
     c00:	c0 cf       	rjmp	.-128    	; 0xb82 <main+0x3c>
	}
}
else {
	if(entering_password()==2){
     c02:	0e 94 68 12 	call	0x24d0	; 0x24d0 <entering_password>
     c06:	82 30       	cpi	r24, 0x02	; 2
     c08:	f9 f4       	brne	.+62     	; 0xc48 <main+0x102>
		CLEAR_BIT(PORTC,motor_r);
     c0a:	a5 e3       	ldi	r26, 0x35	; 53
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e5 e3       	ldi	r30, 0x35	; 53
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	8b 7f       	andi	r24, 0xFB	; 251
     c16:	8c 93       	st	X, r24
				CLEAR_BIT(PORTC,motor_l);
     c18:	a5 e3       	ldi	r26, 0x35	; 53
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e5 e3       	ldi	r30, 0x35	; 53
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	87 7f       	andi	r24, 0xF7	; 247
     c24:	8c 93       	st	X, r24
				SET_BIT(PORTC,buzz);
     c26:	a5 e3       	ldi	r26, 0x35	; 53
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e5 e3       	ldi	r30, 0x35	; 53
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	84 60       	ori	r24, 0x04	; 4
     c32:	8c 93       	st	X, r24
			    flag2=1;
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	80 93 69 00 	sts	0x0069, r24
				timer1_init_CTC_mode();
     c3a:	0e 94 04 13 	call	0x2608	; 0x2608 <timer1_init_CTC_mode>
				while(flag2==1){}
     c3e:	80 91 69 00 	lds	r24, 0x0069
     c42:	81 30       	cpi	r24, 0x01	; 1
     c44:	e1 f3       	breq	.-8      	; 0xc3e <main+0xf8>
     c46:	9d cf       	rjmp	.-198    	; 0xb82 <main+0x3c>
	     continue;}
	else{
		change_password();
     c48:	0e 94 d6 11 	call	0x23ac	; 0x23ac <change_password>
     c4c:	9a cf       	rjmp	.-204    	; 0xb82 <main+0x3c>

00000c4e <EEPROM_init>:
 *******************************************************************************/
#include "i2c.h"
#include "external_eeprom.h"

void EEPROM_init(void)
{
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
	/* just initialize the I2C(TWI) module inside the MC */
	TWI_init();
     c56:	0e 94 d1 06 	call	0xda2	; 0xda2 <TWI_init>
}
     c5a:	cf 91       	pop	r28
     c5c:	df 91       	pop	r29
     c5e:	08 95       	ret

00000c60 <EEPROM_writeByte>:

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
     c60:	df 93       	push	r29
     c62:	cf 93       	push	r28
     c64:	00 d0       	rcall	.+0      	; 0xc66 <EEPROM_writeByte+0x6>
     c66:	00 d0       	rcall	.+0      	; 0xc68 <EEPROM_writeByte+0x8>
     c68:	cd b7       	in	r28, 0x3d	; 61
     c6a:	de b7       	in	r29, 0x3e	; 62
     c6c:	9a 83       	std	Y+2, r25	; 0x02
     c6e:	89 83       	std	Y+1, r24	; 0x01
     c70:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     c72:	0e 94 e7 06 	call	0xdce	; 0xdce <TWI_start>
    if (TWI_getStatus() != TW_START)
     c76:	0e 94 3f 07 	call	0xe7e	; 0xe7e <TWI_getStatus>
     c7a:	88 30       	cpi	r24, 0x08	; 8
     c7c:	11 f0       	breq	.+4      	; 0xc82 <EEPROM_writeByte+0x22>
        return ERROR;
     c7e:	1c 82       	std	Y+4, r1	; 0x04
     c80:	28 c0       	rjmp	.+80     	; 0xcd2 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
     c82:	89 81       	ldd	r24, Y+1	; 0x01
     c84:	9a 81       	ldd	r25, Y+2	; 0x02
     c86:	80 70       	andi	r24, 0x00	; 0
     c88:	97 70       	andi	r25, 0x07	; 7
     c8a:	88 0f       	add	r24, r24
     c8c:	89 2f       	mov	r24, r25
     c8e:	88 1f       	adc	r24, r24
     c90:	99 0b       	sbc	r25, r25
     c92:	91 95       	neg	r25
     c94:	80 6a       	ori	r24, 0xA0	; 160
     c96:	0e 94 02 07 	call	0xe04	; 0xe04 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     c9a:	0e 94 3f 07 	call	0xe7e	; 0xe7e <TWI_getStatus>
     c9e:	88 31       	cpi	r24, 0x18	; 24
     ca0:	11 f0       	breq	.+4      	; 0xca6 <EEPROM_writeByte+0x46>
        return ERROR; 
     ca2:	1c 82       	std	Y+4, r1	; 0x04
     ca4:	16 c0       	rjmp	.+44     	; 0xcd2 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     ca6:	89 81       	ldd	r24, Y+1	; 0x01
     ca8:	0e 94 02 07 	call	0xe04	; 0xe04 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     cac:	0e 94 3f 07 	call	0xe7e	; 0xe7e <TWI_getStatus>
     cb0:	88 32       	cpi	r24, 0x28	; 40
     cb2:	11 f0       	breq	.+4      	; 0xcb8 <EEPROM_writeByte+0x58>
        return ERROR;
     cb4:	1c 82       	std	Y+4, r1	; 0x04
     cb6:	0d c0       	rjmp	.+26     	; 0xcd2 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_write(u8data);
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	0e 94 02 07 	call	0xe04	; 0xe04 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     cbe:	0e 94 3f 07 	call	0xe7e	; 0xe7e <TWI_getStatus>
     cc2:	88 32       	cpi	r24, 0x28	; 40
     cc4:	11 f0       	breq	.+4      	; 0xcca <EEPROM_writeByte+0x6a>
        return ERROR;
     cc6:	1c 82       	std	Y+4, r1	; 0x04
     cc8:	04 c0       	rjmp	.+8      	; 0xcd2 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
     cca:	0e 94 f7 06 	call	0xdee	; 0xdee <TWI_stop>
	
    return SUCCESS;
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	8c 83       	std	Y+4, r24	; 0x04
     cd2:	8c 81       	ldd	r24, Y+4	; 0x04
}
     cd4:	0f 90       	pop	r0
     cd6:	0f 90       	pop	r0
     cd8:	0f 90       	pop	r0
     cda:	0f 90       	pop	r0
     cdc:	cf 91       	pop	r28
     cde:	df 91       	pop	r29
     ce0:	08 95       	ret

00000ce2 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
     ce2:	df 93       	push	r29
     ce4:	cf 93       	push	r28
     ce6:	00 d0       	rcall	.+0      	; 0xce8 <EEPROM_readByte+0x6>
     ce8:	00 d0       	rcall	.+0      	; 0xcea <EEPROM_readByte+0x8>
     cea:	0f 92       	push	r0
     cec:	cd b7       	in	r28, 0x3d	; 61
     cee:	de b7       	in	r29, 0x3e	; 62
     cf0:	9a 83       	std	Y+2, r25	; 0x02
     cf2:	89 83       	std	Y+1, r24	; 0x01
     cf4:	7c 83       	std	Y+4, r23	; 0x04
     cf6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
     cf8:	0e 94 e7 06 	call	0xdce	; 0xdce <TWI_start>
    if (TWI_getStatus() != TW_START)
     cfc:	0e 94 3f 07 	call	0xe7e	; 0xe7e <TWI_getStatus>
     d00:	88 30       	cpi	r24, 0x08	; 8
     d02:	11 f0       	breq	.+4      	; 0xd08 <EEPROM_readByte+0x26>
        return ERROR;
     d04:	1d 82       	std	Y+5, r1	; 0x05
     d06:	44 c0       	rjmp	.+136    	; 0xd90 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	9a 81       	ldd	r25, Y+2	; 0x02
     d0c:	80 70       	andi	r24, 0x00	; 0
     d0e:	97 70       	andi	r25, 0x07	; 7
     d10:	88 0f       	add	r24, r24
     d12:	89 2f       	mov	r24, r25
     d14:	88 1f       	adc	r24, r24
     d16:	99 0b       	sbc	r25, r25
     d18:	91 95       	neg	r25
     d1a:	80 6a       	ori	r24, 0xA0	; 160
     d1c:	0e 94 02 07 	call	0xe04	; 0xe04 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_W_ACK)
     d20:	0e 94 3f 07 	call	0xe7e	; 0xe7e <TWI_getStatus>
     d24:	88 31       	cpi	r24, 0x18	; 24
     d26:	11 f0       	breq	.+4      	; 0xd2c <EEPROM_readByte+0x4a>
        return ERROR;
     d28:	1d 82       	std	Y+5, r1	; 0x05
     d2a:	32 c0       	rjmp	.+100    	; 0xd90 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_write((uint8)(u16addr));
     d2c:	89 81       	ldd	r24, Y+1	; 0x01
     d2e:	0e 94 02 07 	call	0xe04	; 0xe04 <TWI_write>
    if (TWI_getStatus() != TW_MT_DATA_ACK)
     d32:	0e 94 3f 07 	call	0xe7e	; 0xe7e <TWI_getStatus>
     d36:	88 32       	cpi	r24, 0x28	; 40
     d38:	11 f0       	breq	.+4      	; 0xd3e <EEPROM_readByte+0x5c>
        return ERROR;
     d3a:	1d 82       	std	Y+5, r1	; 0x05
     d3c:	29 c0       	rjmp	.+82     	; 0xd90 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
     d3e:	0e 94 e7 06 	call	0xdce	; 0xdce <TWI_start>
    if (TWI_getStatus() != TW_REP_START)
     d42:	0e 94 3f 07 	call	0xe7e	; 0xe7e <TWI_getStatus>
     d46:	80 31       	cpi	r24, 0x10	; 16
     d48:	11 f0       	breq	.+4      	; 0xd4e <EEPROM_readByte+0x6c>
        return ERROR;
     d4a:	1d 82       	std	Y+5, r1	; 0x05
     d4c:	21 c0       	rjmp	.+66     	; 0xd90 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_write((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
     d4e:	89 81       	ldd	r24, Y+1	; 0x01
     d50:	9a 81       	ldd	r25, Y+2	; 0x02
     d52:	80 70       	andi	r24, 0x00	; 0
     d54:	97 70       	andi	r25, 0x07	; 7
     d56:	88 0f       	add	r24, r24
     d58:	89 2f       	mov	r24, r25
     d5a:	88 1f       	adc	r24, r24
     d5c:	99 0b       	sbc	r25, r25
     d5e:	91 95       	neg	r25
     d60:	81 6a       	ori	r24, 0xA1	; 161
     d62:	0e 94 02 07 	call	0xe04	; 0xe04 <TWI_write>
    if (TWI_getStatus() != TW_MT_SLA_R_ACK)
     d66:	0e 94 3f 07 	call	0xe7e	; 0xe7e <TWI_getStatus>
     d6a:	80 34       	cpi	r24, 0x40	; 64
     d6c:	11 f0       	breq	.+4      	; 0xd72 <EEPROM_readByte+0x90>
        return ERROR;
     d6e:	1d 82       	std	Y+5, r1	; 0x05
     d70:	0f c0       	rjmp	.+30     	; 0xd90 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readWithNACK();
     d72:	0e 94 2c 07 	call	0xe58	; 0xe58 <TWI_readWithNACK>
     d76:	eb 81       	ldd	r30, Y+3	; 0x03
     d78:	fc 81       	ldd	r31, Y+4	; 0x04
     d7a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TW_MR_DATA_NACK)
     d7c:	0e 94 3f 07 	call	0xe7e	; 0xe7e <TWI_getStatus>
     d80:	88 35       	cpi	r24, 0x58	; 88
     d82:	11 f0       	breq	.+4      	; 0xd88 <EEPROM_readByte+0xa6>
        return ERROR;
     d84:	1d 82       	std	Y+5, r1	; 0x05
     d86:	04 c0       	rjmp	.+8      	; 0xd90 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
     d88:	0e 94 f7 06 	call	0xdee	; 0xdee <TWI_stop>
    return SUCCESS;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	8d 83       	std	Y+5, r24	; 0x05
     d90:	8d 81       	ldd	r24, Y+5	; 0x05
}
     d92:	0f 90       	pop	r0
     d94:	0f 90       	pop	r0
     d96:	0f 90       	pop	r0
     d98:	0f 90       	pop	r0
     d9a:	0f 90       	pop	r0
     d9c:	cf 91       	pop	r28
     d9e:	df 91       	pop	r29
     da0:	08 95       	ret

00000da2 <TWI_init>:
 *******************************************************************************/
 
#include "i2c.h"

void TWI_init(void)
{
     da2:	df 93       	push	r29
     da4:	cf 93       	push	r28
     da6:	cd b7       	in	r28, 0x3d	; 61
     da8:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
     daa:	e0 e2       	ldi	r30, 0x20	; 32
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	82 e0       	ldi	r24, 0x02	; 2
     db0:	80 83       	st	Z, r24
	TWSR = 0x00;
     db2:	e1 e2       	ldi	r30, 0x21	; 33
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :) 
     db8:	e2 e2       	ldi	r30, 0x22	; 34
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	82 e0       	ldi	r24, 0x02	; 2
     dbe:	80 83       	st	Z, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
     dc0:	e6 e5       	ldi	r30, 0x56	; 86
     dc2:	f0 e0       	ldi	r31, 0x00	; 0
     dc4:	84 e0       	ldi	r24, 0x04	; 4
     dc6:	80 83       	st	Z, r24
}
     dc8:	cf 91       	pop	r28
     dca:	df 91       	pop	r29
     dcc:	08 95       	ret

00000dce <TWI_start>:

void TWI_start(void)
{
     dce:	df 93       	push	r29
     dd0:	cf 93       	push	r28
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     dd6:	e6 e5       	ldi	r30, 0x56	; 86
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	84 ea       	ldi	r24, 0xA4	; 164
     ddc:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     dde:	e6 e5       	ldi	r30, 0x56	; 86
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	80 81       	ld	r24, Z
     de4:	88 23       	and	r24, r24
     de6:	dc f7       	brge	.-10     	; 0xdde <TWI_start+0x10>
}
     de8:	cf 91       	pop	r28
     dea:	df 91       	pop	r29
     dec:	08 95       	ret

00000dee <TWI_stop>:

void TWI_stop(void)
{
     dee:	df 93       	push	r29
     df0:	cf 93       	push	r28
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
     df6:	e6 e5       	ldi	r30, 0x56	; 86
     df8:	f0 e0       	ldi	r31, 0x00	; 0
     dfa:	84 e9       	ldi	r24, 0x94	; 148
     dfc:	80 83       	st	Z, r24
}
     dfe:	cf 91       	pop	r28
     e00:	df 91       	pop	r29
     e02:	08 95       	ret

00000e04 <TWI_write>:

void TWI_write(uint8 data)
{
     e04:	df 93       	push	r29
     e06:	cf 93       	push	r28
     e08:	0f 92       	push	r0
     e0a:	cd b7       	in	r28, 0x3d	; 61
     e0c:	de b7       	in	r29, 0x3e	; 62
     e0e:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
     e10:	e3 e2       	ldi	r30, 0x23	; 35
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
     e18:	e6 e5       	ldi	r30, 0x56	; 86
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	84 e8       	ldi	r24, 0x84	; 132
     e1e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e20:	e6 e5       	ldi	r30, 0x56	; 86
     e22:	f0 e0       	ldi	r31, 0x00	; 0
     e24:	80 81       	ld	r24, Z
     e26:	88 23       	and	r24, r24
     e28:	dc f7       	brge	.-10     	; 0xe20 <TWI_write+0x1c>
}
     e2a:	0f 90       	pop	r0
     e2c:	cf 91       	pop	r28
     e2e:	df 91       	pop	r29
     e30:	08 95       	ret

00000e32 <TWI_readWithACK>:

uint8 TWI_readWithACK(void)
{
     e32:	df 93       	push	r29
     e34:	cf 93       	push	r28
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
     e3a:	e6 e5       	ldi	r30, 0x56	; 86
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	84 ec       	ldi	r24, 0xC4	; 196
     e40:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e42:	e6 e5       	ldi	r30, 0x56	; 86
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	88 23       	and	r24, r24
     e4a:	dc f7       	brge	.-10     	; 0xe42 <TWI_readWithACK+0x10>
    /* Read Data */
    return TWDR;
     e4c:	e3 e2       	ldi	r30, 0x23	; 35
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
}
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <TWI_readWithNACK>:

uint8 TWI_readWithNACK(void)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
     e60:	e6 e5       	ldi	r30, 0x56	; 86
     e62:	f0 e0       	ldi	r31, 0x00	; 0
     e64:	84 e8       	ldi	r24, 0x84	; 132
     e66:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
     e68:	e6 e5       	ldi	r30, 0x56	; 86
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	88 23       	and	r24, r24
     e70:	dc f7       	brge	.-10     	; 0xe68 <TWI_readWithNACK+0x10>
    /* Read Data */
    return TWDR;
     e72:	e3 e2       	ldi	r30, 0x23	; 35
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
}
     e78:	cf 91       	pop	r28
     e7a:	df 91       	pop	r29
     e7c:	08 95       	ret

00000e7e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
     e7e:	df 93       	push	r29
     e80:	cf 93       	push	r28
     e82:	0f 92       	push	r0
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
     e88:	e1 e2       	ldi	r30, 0x21	; 33
     e8a:	f0 e0       	ldi	r31, 0x00	; 0
     e8c:	80 81       	ld	r24, Z
     e8e:	88 7f       	andi	r24, 0xF8	; 248
     e90:	89 83       	std	Y+1, r24	; 0x01
    return status;
     e92:	89 81       	ldd	r24, Y+1	; 0x01
}
     e94:	0f 90       	pop	r0
     e96:	cf 91       	pop	r28
     e98:	df 91       	pop	r29
     e9a:	08 95       	ret

00000e9c <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
     ea4:	a1 e3       	ldi	r26, 0x31	; 49
     ea6:	b0 e0       	ldi	r27, 0x00	; 0
     ea8:	e1 e3       	ldi	r30, 0x31	; 49
     eaa:	f0 e0       	ldi	r31, 0x00	; 0
     eac:	80 81       	ld	r24, Z
     eae:	80 67       	ori	r24, 0x70	; 112
     eb0:	8c 93       	st	X, r24

	#if (DATA_BITS_MODE == 4)
		#ifdef UPPER_PORT_PINS
			LCD_DATA_PORT_DIR |= 0xF0; /* Configure the highest 4 bits of the data port as output pins */
     eb2:	a4 e3       	ldi	r26, 0x34	; 52
     eb4:	b0 e0       	ldi	r27, 0x00	; 0
     eb6:	e4 e3       	ldi	r30, 0x34	; 52
     eb8:	f0 e0       	ldi	r31, 0x00	; 0
     eba:	80 81       	ld	r24, Z
     ebc:	80 6f       	ori	r24, 0xF0	; 240
     ebe:	8c 93       	st	X, r24
		#else
			LCD_DATA_PORT_DIR |= 0x0F; /* Configure the lowest 4 bits of the data port as output pins */
		#endif
		LCD_sendCommand(FOUR_BITS_DATA_MODE); /* initialize LCD in 4-bit mode */
     ec0:	82 e0       	ldi	r24, 0x02	; 2
     ec2:	0e 94 6f 07 	call	0xede	; 0xede <LCD_sendCommand>
		LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */
     ec6:	88 e2       	ldi	r24, 0x28	; 40
     ec8:	0e 94 6f 07 	call	0xede	; 0xede <LCD_sendCommand>
	#elif (DATA_BITS_MODE == 8)
		LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */
		LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
	#endif

	LCD_sendCommand(CURSOR_OFF); /* cursor off */
     ecc:	8c e0       	ldi	r24, 0x0C	; 12
     ece:	0e 94 6f 07 	call	0xede	; 0xede <LCD_sendCommand>
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
     ed2:	81 e0       	ldi	r24, 0x01	; 1
     ed4:	0e 94 6f 07 	call	0xede	; 0xede <LCD_sendCommand>
}
     ed8:	cf 91       	pop	r28
     eda:	df 91       	pop	r29
     edc:	08 95       	ret

00000ede <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	c3 56       	subi	r28, 0x63	; 99
     eec:	d0 40       	sbci	r29, 0x00	; 0
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	de bf       	out	0x3e, r29	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	cd bf       	out	0x3d, r28	; 61
     ef8:	fe 01       	movw	r30, r28
     efa:	ed 59       	subi	r30, 0x9D	; 157
     efc:	ff 4f       	sbci	r31, 0xFF	; 255
     efe:	80 83       	st	Z, r24
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
     f00:	a2 e3       	ldi	r26, 0x32	; 50
     f02:	b0 e0       	ldi	r27, 0x00	; 0
     f04:	e2 e3       	ldi	r30, 0x32	; 50
     f06:	f0 e0       	ldi	r31, 0x00	; 0
     f08:	80 81       	ld	r24, Z
     f0a:	8f 7e       	andi	r24, 0xEF	; 239
     f0c:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
     f0e:	a2 e3       	ldi	r26, 0x32	; 50
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e2 e3       	ldi	r30, 0x32	; 50
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	8f 7d       	andi	r24, 0xDF	; 223
     f1a:	8c 93       	st	X, r24
     f1c:	fe 01       	movw	r30, r28
     f1e:	e1 5a       	subi	r30, 0xA1	; 161
     f20:	ff 4f       	sbci	r31, 0xFF	; 255
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	a0 e8       	ldi	r26, 0x80	; 128
     f28:	bf e3       	ldi	r27, 0x3F	; 63
     f2a:	80 83       	st	Z, r24
     f2c:	91 83       	std	Z+1, r25	; 0x01
     f2e:	a2 83       	std	Z+2, r26	; 0x02
     f30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f32:	8e 01       	movw	r16, r28
     f34:	05 5a       	subi	r16, 0xA5	; 165
     f36:	1f 4f       	sbci	r17, 0xFF	; 255
     f38:	fe 01       	movw	r30, r28
     f3a:	e1 5a       	subi	r30, 0xA1	; 161
     f3c:	ff 4f       	sbci	r31, 0xFF	; 255
     f3e:	60 81       	ld	r22, Z
     f40:	71 81       	ldd	r23, Z+1	; 0x01
     f42:	82 81       	ldd	r24, Z+2	; 0x02
     f44:	93 81       	ldd	r25, Z+3	; 0x03
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	4a e7       	ldi	r20, 0x7A	; 122
     f4c:	53 e4       	ldi	r21, 0x43	; 67
     f4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f52:	dc 01       	movw	r26, r24
     f54:	cb 01       	movw	r24, r22
     f56:	f8 01       	movw	r30, r16
     f58:	80 83       	st	Z, r24
     f5a:	91 83       	std	Z+1, r25	; 0x01
     f5c:	a2 83       	std	Z+2, r26	; 0x02
     f5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f60:	fe 01       	movw	r30, r28
     f62:	e5 5a       	subi	r30, 0xA5	; 165
     f64:	ff 4f       	sbci	r31, 0xFF	; 255
     f66:	60 81       	ld	r22, Z
     f68:	71 81       	ldd	r23, Z+1	; 0x01
     f6a:	82 81       	ldd	r24, Z+2	; 0x02
     f6c:	93 81       	ldd	r25, Z+3	; 0x03
     f6e:	20 e0       	ldi	r18, 0x00	; 0
     f70:	30 e0       	ldi	r19, 0x00	; 0
     f72:	40 e8       	ldi	r20, 0x80	; 128
     f74:	5f e3       	ldi	r21, 0x3F	; 63
     f76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f7a:	88 23       	and	r24, r24
     f7c:	44 f4       	brge	.+16     	; 0xf8e <LCD_sendCommand+0xb0>
		__ticks = 1;
     f7e:	fe 01       	movw	r30, r28
     f80:	e7 5a       	subi	r30, 0xA7	; 167
     f82:	ff 4f       	sbci	r31, 0xFF	; 255
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	91 83       	std	Z+1, r25	; 0x01
     f8a:	80 83       	st	Z, r24
     f8c:	64 c0       	rjmp	.+200    	; 0x1056 <LCD_sendCommand+0x178>
	else if (__tmp > 65535)
     f8e:	fe 01       	movw	r30, r28
     f90:	e5 5a       	subi	r30, 0xA5	; 165
     f92:	ff 4f       	sbci	r31, 0xFF	; 255
     f94:	60 81       	ld	r22, Z
     f96:	71 81       	ldd	r23, Z+1	; 0x01
     f98:	82 81       	ldd	r24, Z+2	; 0x02
     f9a:	93 81       	ldd	r25, Z+3	; 0x03
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	3f ef       	ldi	r19, 0xFF	; 255
     fa0:	4f e7       	ldi	r20, 0x7F	; 127
     fa2:	57 e4       	ldi	r21, 0x47	; 71
     fa4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fa8:	18 16       	cp	r1, r24
     faa:	0c f0       	brlt	.+2      	; 0xfae <LCD_sendCommand+0xd0>
     fac:	43 c0       	rjmp	.+134    	; 0x1034 <LCD_sendCommand+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fae:	fe 01       	movw	r30, r28
     fb0:	e1 5a       	subi	r30, 0xA1	; 161
     fb2:	ff 4f       	sbci	r31, 0xFF	; 255
     fb4:	60 81       	ld	r22, Z
     fb6:	71 81       	ldd	r23, Z+1	; 0x01
     fb8:	82 81       	ldd	r24, Z+2	; 0x02
     fba:	93 81       	ldd	r25, Z+3	; 0x03
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	40 e2       	ldi	r20, 0x20	; 32
     fc2:	51 e4       	ldi	r21, 0x41	; 65
     fc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	8e 01       	movw	r16, r28
     fce:	07 5a       	subi	r16, 0xA7	; 167
     fd0:	1f 4f       	sbci	r17, 0xFF	; 255
     fd2:	bc 01       	movw	r22, r24
     fd4:	cd 01       	movw	r24, r26
     fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	f8 01       	movw	r30, r16
     fe0:	91 83       	std	Z+1, r25	; 0x01
     fe2:	80 83       	st	Z, r24
     fe4:	1f c0       	rjmp	.+62     	; 0x1024 <LCD_sendCommand+0x146>
     fe6:	fe 01       	movw	r30, r28
     fe8:	e9 5a       	subi	r30, 0xA9	; 169
     fea:	ff 4f       	sbci	r31, 0xFF	; 255
     fec:	89 e1       	ldi	r24, 0x19	; 25
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	91 83       	std	Z+1, r25	; 0x01
     ff2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     ff4:	fe 01       	movw	r30, r28
     ff6:	e9 5a       	subi	r30, 0xA9	; 169
     ff8:	ff 4f       	sbci	r31, 0xFF	; 255
     ffa:	80 81       	ld	r24, Z
     ffc:	91 81       	ldd	r25, Z+1	; 0x01
     ffe:	01 97       	sbiw	r24, 0x01	; 1
    1000:	f1 f7       	brne	.-4      	; 0xffe <LCD_sendCommand+0x120>
    1002:	fe 01       	movw	r30, r28
    1004:	e9 5a       	subi	r30, 0xA9	; 169
    1006:	ff 4f       	sbci	r31, 0xFF	; 255
    1008:	91 83       	std	Z+1, r25	; 0x01
    100a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    100c:	de 01       	movw	r26, r28
    100e:	a7 5a       	subi	r26, 0xA7	; 167
    1010:	bf 4f       	sbci	r27, 0xFF	; 255
    1012:	fe 01       	movw	r30, r28
    1014:	e7 5a       	subi	r30, 0xA7	; 167
    1016:	ff 4f       	sbci	r31, 0xFF	; 255
    1018:	80 81       	ld	r24, Z
    101a:	91 81       	ldd	r25, Z+1	; 0x01
    101c:	01 97       	sbiw	r24, 0x01	; 1
    101e:	11 96       	adiw	r26, 0x01	; 1
    1020:	9c 93       	st	X, r25
    1022:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1024:	fe 01       	movw	r30, r28
    1026:	e7 5a       	subi	r30, 0xA7	; 167
    1028:	ff 4f       	sbci	r31, 0xFF	; 255
    102a:	80 81       	ld	r24, Z
    102c:	91 81       	ldd	r25, Z+1	; 0x01
    102e:	00 97       	sbiw	r24, 0x00	; 0
    1030:	d1 f6       	brne	.-76     	; 0xfe6 <LCD_sendCommand+0x108>
    1032:	27 c0       	rjmp	.+78     	; 0x1082 <LCD_sendCommand+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1034:	8e 01       	movw	r16, r28
    1036:	07 5a       	subi	r16, 0xA7	; 167
    1038:	1f 4f       	sbci	r17, 0xFF	; 255
    103a:	fe 01       	movw	r30, r28
    103c:	e5 5a       	subi	r30, 0xA5	; 165
    103e:	ff 4f       	sbci	r31, 0xFF	; 255
    1040:	60 81       	ld	r22, Z
    1042:	71 81       	ldd	r23, Z+1	; 0x01
    1044:	82 81       	ldd	r24, Z+2	; 0x02
    1046:	93 81       	ldd	r25, Z+3	; 0x03
    1048:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    104c:	dc 01       	movw	r26, r24
    104e:	cb 01       	movw	r24, r22
    1050:	f8 01       	movw	r30, r16
    1052:	91 83       	std	Z+1, r25	; 0x01
    1054:	80 83       	st	Z, r24
    1056:	de 01       	movw	r26, r28
    1058:	ab 5a       	subi	r26, 0xAB	; 171
    105a:	bf 4f       	sbci	r27, 0xFF	; 255
    105c:	fe 01       	movw	r30, r28
    105e:	e7 5a       	subi	r30, 0xA7	; 167
    1060:	ff 4f       	sbci	r31, 0xFF	; 255
    1062:	80 81       	ld	r24, Z
    1064:	91 81       	ldd	r25, Z+1	; 0x01
    1066:	8d 93       	st	X+, r24
    1068:	9c 93       	st	X, r25
    106a:	fe 01       	movw	r30, r28
    106c:	eb 5a       	subi	r30, 0xAB	; 171
    106e:	ff 4f       	sbci	r31, 0xFF	; 255
    1070:	80 81       	ld	r24, Z
    1072:	91 81       	ldd	r25, Z+1	; 0x01
    1074:	01 97       	sbiw	r24, 0x01	; 1
    1076:	f1 f7       	brne	.-4      	; 0x1074 <LCD_sendCommand+0x196>
    1078:	fe 01       	movw	r30, r28
    107a:	eb 5a       	subi	r30, 0xAB	; 171
    107c:	ff 4f       	sbci	r31, 0xFF	; 255
    107e:	91 83       	std	Z+1, r25	; 0x01
    1080:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1082:	a2 e3       	ldi	r26, 0x32	; 50
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	e2 e3       	ldi	r30, 0x32	; 50
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	80 81       	ld	r24, Z
    108c:	80 64       	ori	r24, 0x40	; 64
    108e:	8c 93       	st	X, r24
    1090:	fe 01       	movw	r30, r28
    1092:	ef 5a       	subi	r30, 0xAF	; 175
    1094:	ff 4f       	sbci	r31, 0xFF	; 255
    1096:	80 e0       	ldi	r24, 0x00	; 0
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	a0 e8       	ldi	r26, 0x80	; 128
    109c:	bf e3       	ldi	r27, 0x3F	; 63
    109e:	80 83       	st	Z, r24
    10a0:	91 83       	std	Z+1, r25	; 0x01
    10a2:	a2 83       	std	Z+2, r26	; 0x02
    10a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10a6:	8e 01       	movw	r16, r28
    10a8:	03 5b       	subi	r16, 0xB3	; 179
    10aa:	1f 4f       	sbci	r17, 0xFF	; 255
    10ac:	fe 01       	movw	r30, r28
    10ae:	ef 5a       	subi	r30, 0xAF	; 175
    10b0:	ff 4f       	sbci	r31, 0xFF	; 255
    10b2:	60 81       	ld	r22, Z
    10b4:	71 81       	ldd	r23, Z+1	; 0x01
    10b6:	82 81       	ldd	r24, Z+2	; 0x02
    10b8:	93 81       	ldd	r25, Z+3	; 0x03
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	4a e7       	ldi	r20, 0x7A	; 122
    10c0:	53 e4       	ldi	r21, 0x43	; 67
    10c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	f8 01       	movw	r30, r16
    10cc:	80 83       	st	Z, r24
    10ce:	91 83       	std	Z+1, r25	; 0x01
    10d0:	a2 83       	std	Z+2, r26	; 0x02
    10d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    10d4:	fe 01       	movw	r30, r28
    10d6:	e3 5b       	subi	r30, 0xB3	; 179
    10d8:	ff 4f       	sbci	r31, 0xFF	; 255
    10da:	60 81       	ld	r22, Z
    10dc:	71 81       	ldd	r23, Z+1	; 0x01
    10de:	82 81       	ldd	r24, Z+2	; 0x02
    10e0:	93 81       	ldd	r25, Z+3	; 0x03
    10e2:	20 e0       	ldi	r18, 0x00	; 0
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	40 e8       	ldi	r20, 0x80	; 128
    10e8:	5f e3       	ldi	r21, 0x3F	; 63
    10ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10ee:	88 23       	and	r24, r24
    10f0:	44 f4       	brge	.+16     	; 0x1102 <LCD_sendCommand+0x224>
		__ticks = 1;
    10f2:	fe 01       	movw	r30, r28
    10f4:	e5 5b       	subi	r30, 0xB5	; 181
    10f6:	ff 4f       	sbci	r31, 0xFF	; 255
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	91 83       	std	Z+1, r25	; 0x01
    10fe:	80 83       	st	Z, r24
    1100:	64 c0       	rjmp	.+200    	; 0x11ca <LCD_sendCommand+0x2ec>
	else if (__tmp > 65535)
    1102:	fe 01       	movw	r30, r28
    1104:	e3 5b       	subi	r30, 0xB3	; 179
    1106:	ff 4f       	sbci	r31, 0xFF	; 255
    1108:	60 81       	ld	r22, Z
    110a:	71 81       	ldd	r23, Z+1	; 0x01
    110c:	82 81       	ldd	r24, Z+2	; 0x02
    110e:	93 81       	ldd	r25, Z+3	; 0x03
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	3f ef       	ldi	r19, 0xFF	; 255
    1114:	4f e7       	ldi	r20, 0x7F	; 127
    1116:	57 e4       	ldi	r21, 0x47	; 71
    1118:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    111c:	18 16       	cp	r1, r24
    111e:	0c f0       	brlt	.+2      	; 0x1122 <LCD_sendCommand+0x244>
    1120:	43 c0       	rjmp	.+134    	; 0x11a8 <LCD_sendCommand+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1122:	fe 01       	movw	r30, r28
    1124:	ef 5a       	subi	r30, 0xAF	; 175
    1126:	ff 4f       	sbci	r31, 0xFF	; 255
    1128:	60 81       	ld	r22, Z
    112a:	71 81       	ldd	r23, Z+1	; 0x01
    112c:	82 81       	ldd	r24, Z+2	; 0x02
    112e:	93 81       	ldd	r25, Z+3	; 0x03
    1130:	20 e0       	ldi	r18, 0x00	; 0
    1132:	30 e0       	ldi	r19, 0x00	; 0
    1134:	40 e2       	ldi	r20, 0x20	; 32
    1136:	51 e4       	ldi	r21, 0x41	; 65
    1138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    113c:	dc 01       	movw	r26, r24
    113e:	cb 01       	movw	r24, r22
    1140:	8e 01       	movw	r16, r28
    1142:	05 5b       	subi	r16, 0xB5	; 181
    1144:	1f 4f       	sbci	r17, 0xFF	; 255
    1146:	bc 01       	movw	r22, r24
    1148:	cd 01       	movw	r24, r26
    114a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	f8 01       	movw	r30, r16
    1154:	91 83       	std	Z+1, r25	; 0x01
    1156:	80 83       	st	Z, r24
    1158:	1f c0       	rjmp	.+62     	; 0x1198 <LCD_sendCommand+0x2ba>
    115a:	fe 01       	movw	r30, r28
    115c:	e7 5b       	subi	r30, 0xB7	; 183
    115e:	ff 4f       	sbci	r31, 0xFF	; 255
    1160:	89 e1       	ldi	r24, 0x19	; 25
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	91 83       	std	Z+1, r25	; 0x01
    1166:	80 83       	st	Z, r24
    1168:	fe 01       	movw	r30, r28
    116a:	e7 5b       	subi	r30, 0xB7	; 183
    116c:	ff 4f       	sbci	r31, 0xFF	; 255
    116e:	80 81       	ld	r24, Z
    1170:	91 81       	ldd	r25, Z+1	; 0x01
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	f1 f7       	brne	.-4      	; 0x1172 <LCD_sendCommand+0x294>
    1176:	fe 01       	movw	r30, r28
    1178:	e7 5b       	subi	r30, 0xB7	; 183
    117a:	ff 4f       	sbci	r31, 0xFF	; 255
    117c:	91 83       	std	Z+1, r25	; 0x01
    117e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1180:	de 01       	movw	r26, r28
    1182:	a5 5b       	subi	r26, 0xB5	; 181
    1184:	bf 4f       	sbci	r27, 0xFF	; 255
    1186:	fe 01       	movw	r30, r28
    1188:	e5 5b       	subi	r30, 0xB5	; 181
    118a:	ff 4f       	sbci	r31, 0xFF	; 255
    118c:	80 81       	ld	r24, Z
    118e:	91 81       	ldd	r25, Z+1	; 0x01
    1190:	01 97       	sbiw	r24, 0x01	; 1
    1192:	11 96       	adiw	r26, 0x01	; 1
    1194:	9c 93       	st	X, r25
    1196:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1198:	fe 01       	movw	r30, r28
    119a:	e5 5b       	subi	r30, 0xB5	; 181
    119c:	ff 4f       	sbci	r31, 0xFF	; 255
    119e:	80 81       	ld	r24, Z
    11a0:	91 81       	ldd	r25, Z+1	; 0x01
    11a2:	00 97       	sbiw	r24, 0x00	; 0
    11a4:	d1 f6       	brne	.-76     	; 0x115a <LCD_sendCommand+0x27c>
    11a6:	27 c0       	rjmp	.+78     	; 0x11f6 <LCD_sendCommand+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11a8:	8e 01       	movw	r16, r28
    11aa:	05 5b       	subi	r16, 0xB5	; 181
    11ac:	1f 4f       	sbci	r17, 0xFF	; 255
    11ae:	fe 01       	movw	r30, r28
    11b0:	e3 5b       	subi	r30, 0xB3	; 179
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	60 81       	ld	r22, Z
    11b6:	71 81       	ldd	r23, Z+1	; 0x01
    11b8:	82 81       	ldd	r24, Z+2	; 0x02
    11ba:	93 81       	ldd	r25, Z+3	; 0x03
    11bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c0:	dc 01       	movw	r26, r24
    11c2:	cb 01       	movw	r24, r22
    11c4:	f8 01       	movw	r30, r16
    11c6:	91 83       	std	Z+1, r25	; 0x01
    11c8:	80 83       	st	Z, r24
    11ca:	de 01       	movw	r26, r28
    11cc:	a9 5b       	subi	r26, 0xB9	; 185
    11ce:	bf 4f       	sbci	r27, 0xFF	; 255
    11d0:	fe 01       	movw	r30, r28
    11d2:	e5 5b       	subi	r30, 0xB5	; 181
    11d4:	ff 4f       	sbci	r31, 0xFF	; 255
    11d6:	80 81       	ld	r24, Z
    11d8:	91 81       	ldd	r25, Z+1	; 0x01
    11da:	8d 93       	st	X+, r24
    11dc:	9c 93       	st	X, r25
    11de:	fe 01       	movw	r30, r28
    11e0:	e9 5b       	subi	r30, 0xB9	; 185
    11e2:	ff 4f       	sbci	r31, 0xFF	; 255
    11e4:	80 81       	ld	r24, Z
    11e6:	91 81       	ldd	r25, Z+1	; 0x01
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <LCD_sendCommand+0x30a>
    11ec:	fe 01       	movw	r30, r28
    11ee:	e9 5b       	subi	r30, 0xB9	; 185
    11f0:	ff 4f       	sbci	r31, 0xFF	; 255
    11f2:	91 83       	std	Z+1, r25	; 0x01
    11f4:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (command & 0xF0);
    11f6:	a5 e3       	ldi	r26, 0x35	; 53
    11f8:	b0 e0       	ldi	r27, 0x00	; 0
    11fa:	e5 e3       	ldi	r30, 0x35	; 53
    11fc:	f0 e0       	ldi	r31, 0x00	; 0
    11fe:	80 81       	ld	r24, Z
    1200:	98 2f       	mov	r25, r24
    1202:	9f 70       	andi	r25, 0x0F	; 15
    1204:	fe 01       	movw	r30, r28
    1206:	ed 59       	subi	r30, 0x9D	; 157
    1208:	ff 4f       	sbci	r31, 0xFF	; 255
    120a:	80 81       	ld	r24, Z
    120c:	80 7f       	andi	r24, 0xF0	; 240
    120e:	89 2b       	or	r24, r25
    1210:	8c 93       	st	X, r24
    1212:	fe 01       	movw	r30, r28
    1214:	ed 5b       	subi	r30, 0xBD	; 189
    1216:	ff 4f       	sbci	r31, 0xFF	; 255
    1218:	80 e0       	ldi	r24, 0x00	; 0
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	a0 e8       	ldi	r26, 0x80	; 128
    121e:	bf e3       	ldi	r27, 0x3F	; 63
    1220:	80 83       	st	Z, r24
    1222:	91 83       	std	Z+1, r25	; 0x01
    1224:	a2 83       	std	Z+2, r26	; 0x02
    1226:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1228:	8e 01       	movw	r16, r28
    122a:	01 5c       	subi	r16, 0xC1	; 193
    122c:	1f 4f       	sbci	r17, 0xFF	; 255
    122e:	fe 01       	movw	r30, r28
    1230:	ed 5b       	subi	r30, 0xBD	; 189
    1232:	ff 4f       	sbci	r31, 0xFF	; 255
    1234:	60 81       	ld	r22, Z
    1236:	71 81       	ldd	r23, Z+1	; 0x01
    1238:	82 81       	ldd	r24, Z+2	; 0x02
    123a:	93 81       	ldd	r25, Z+3	; 0x03
    123c:	20 e0       	ldi	r18, 0x00	; 0
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	4a e7       	ldi	r20, 0x7A	; 122
    1242:	53 e4       	ldi	r21, 0x43	; 67
    1244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1248:	dc 01       	movw	r26, r24
    124a:	cb 01       	movw	r24, r22
    124c:	f8 01       	movw	r30, r16
    124e:	80 83       	st	Z, r24
    1250:	91 83       	std	Z+1, r25	; 0x01
    1252:	a2 83       	std	Z+2, r26	; 0x02
    1254:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1256:	fe 01       	movw	r30, r28
    1258:	ff 96       	adiw	r30, 0x3f	; 63
    125a:	60 81       	ld	r22, Z
    125c:	71 81       	ldd	r23, Z+1	; 0x01
    125e:	82 81       	ldd	r24, Z+2	; 0x02
    1260:	93 81       	ldd	r25, Z+3	; 0x03
    1262:	20 e0       	ldi	r18, 0x00	; 0
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	40 e8       	ldi	r20, 0x80	; 128
    1268:	5f e3       	ldi	r21, 0x3F	; 63
    126a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    126e:	88 23       	and	r24, r24
    1270:	2c f4       	brge	.+10     	; 0x127c <LCD_sendCommand+0x39e>
		__ticks = 1;
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	90 e0       	ldi	r25, 0x00	; 0
    1276:	9e af       	std	Y+62, r25	; 0x3e
    1278:	8d af       	std	Y+61, r24	; 0x3d
    127a:	46 c0       	rjmp	.+140    	; 0x1308 <LCD_sendCommand+0x42a>
	else if (__tmp > 65535)
    127c:	fe 01       	movw	r30, r28
    127e:	ff 96       	adiw	r30, 0x3f	; 63
    1280:	60 81       	ld	r22, Z
    1282:	71 81       	ldd	r23, Z+1	; 0x01
    1284:	82 81       	ldd	r24, Z+2	; 0x02
    1286:	93 81       	ldd	r25, Z+3	; 0x03
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	3f ef       	ldi	r19, 0xFF	; 255
    128c:	4f e7       	ldi	r20, 0x7F	; 127
    128e:	57 e4       	ldi	r21, 0x47	; 71
    1290:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1294:	18 16       	cp	r1, r24
    1296:	64 f5       	brge	.+88     	; 0x12f0 <LCD_sendCommand+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1298:	fe 01       	movw	r30, r28
    129a:	ed 5b       	subi	r30, 0xBD	; 189
    129c:	ff 4f       	sbci	r31, 0xFF	; 255
    129e:	60 81       	ld	r22, Z
    12a0:	71 81       	ldd	r23, Z+1	; 0x01
    12a2:	82 81       	ldd	r24, Z+2	; 0x02
    12a4:	93 81       	ldd	r25, Z+3	; 0x03
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e2       	ldi	r20, 0x20	; 32
    12ac:	51 e4       	ldi	r21, 0x41	; 65
    12ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12b2:	dc 01       	movw	r26, r24
    12b4:	cb 01       	movw	r24, r22
    12b6:	bc 01       	movw	r22, r24
    12b8:	cd 01       	movw	r24, r26
    12ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12be:	dc 01       	movw	r26, r24
    12c0:	cb 01       	movw	r24, r22
    12c2:	9e af       	std	Y+62, r25	; 0x3e
    12c4:	8d af       	std	Y+61, r24	; 0x3d
    12c6:	0f c0       	rjmp	.+30     	; 0x12e6 <LCD_sendCommand+0x408>
    12c8:	89 e1       	ldi	r24, 0x19	; 25
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	9c af       	std	Y+60, r25	; 0x3c
    12ce:	8b af       	std	Y+59, r24	; 0x3b
    12d0:	8b ad       	ldd	r24, Y+59	; 0x3b
    12d2:	9c ad       	ldd	r25, Y+60	; 0x3c
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <LCD_sendCommand+0x3f6>
    12d8:	9c af       	std	Y+60, r25	; 0x3c
    12da:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    12de:	9e ad       	ldd	r25, Y+62	; 0x3e
    12e0:	01 97       	sbiw	r24, 0x01	; 1
    12e2:	9e af       	std	Y+62, r25	; 0x3e
    12e4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12e6:	8d ad       	ldd	r24, Y+61	; 0x3d
    12e8:	9e ad       	ldd	r25, Y+62	; 0x3e
    12ea:	00 97       	sbiw	r24, 0x00	; 0
    12ec:	69 f7       	brne	.-38     	; 0x12c8 <LCD_sendCommand+0x3ea>
    12ee:	16 c0       	rjmp	.+44     	; 0x131c <LCD_sendCommand+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12f0:	fe 01       	movw	r30, r28
    12f2:	ff 96       	adiw	r30, 0x3f	; 63
    12f4:	60 81       	ld	r22, Z
    12f6:	71 81       	ldd	r23, Z+1	; 0x01
    12f8:	82 81       	ldd	r24, Z+2	; 0x02
    12fa:	93 81       	ldd	r25, Z+3	; 0x03
    12fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	9e af       	std	Y+62, r25	; 0x3e
    1306:	8d af       	std	Y+61, r24	; 0x3d
    1308:	8d ad       	ldd	r24, Y+61	; 0x3d
    130a:	9e ad       	ldd	r25, Y+62	; 0x3e
    130c:	9a af       	std	Y+58, r25	; 0x3a
    130e:	89 af       	std	Y+57, r24	; 0x39
    1310:	89 ad       	ldd	r24, Y+57	; 0x39
    1312:	9a ad       	ldd	r25, Y+58	; 0x3a
    1314:	01 97       	sbiw	r24, 0x01	; 1
    1316:	f1 f7       	brne	.-4      	; 0x1314 <LCD_sendCommand+0x436>
    1318:	9a af       	std	Y+58, r25	; 0x3a
    131a:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((command & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    131c:	a2 e3       	ldi	r26, 0x32	; 50
    131e:	b0 e0       	ldi	r27, 0x00	; 0
    1320:	e2 e3       	ldi	r30, 0x32	; 50
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	80 81       	ld	r24, Z
    1326:	8f 7b       	andi	r24, 0xBF	; 191
    1328:	8c 93       	st	X, r24
    132a:	80 e0       	ldi	r24, 0x00	; 0
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	a0 e8       	ldi	r26, 0x80	; 128
    1330:	bf e3       	ldi	r27, 0x3F	; 63
    1332:	8d ab       	std	Y+53, r24	; 0x35
    1334:	9e ab       	std	Y+54, r25	; 0x36
    1336:	af ab       	std	Y+55, r26	; 0x37
    1338:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    133a:	6d a9       	ldd	r22, Y+53	; 0x35
    133c:	7e a9       	ldd	r23, Y+54	; 0x36
    133e:	8f a9       	ldd	r24, Y+55	; 0x37
    1340:	98 ad       	ldd	r25, Y+56	; 0x38
    1342:	20 e0       	ldi	r18, 0x00	; 0
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	4a e7       	ldi	r20, 0x7A	; 122
    1348:	53 e4       	ldi	r21, 0x43	; 67
    134a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	89 ab       	std	Y+49, r24	; 0x31
    1354:	9a ab       	std	Y+50, r25	; 0x32
    1356:	ab ab       	std	Y+51, r26	; 0x33
    1358:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    135a:	69 a9       	ldd	r22, Y+49	; 0x31
    135c:	7a a9       	ldd	r23, Y+50	; 0x32
    135e:	8b a9       	ldd	r24, Y+51	; 0x33
    1360:	9c a9       	ldd	r25, Y+52	; 0x34
    1362:	20 e0       	ldi	r18, 0x00	; 0
    1364:	30 e0       	ldi	r19, 0x00	; 0
    1366:	40 e8       	ldi	r20, 0x80	; 128
    1368:	5f e3       	ldi	r21, 0x3F	; 63
    136a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    136e:	88 23       	and	r24, r24
    1370:	2c f4       	brge	.+10     	; 0x137c <LCD_sendCommand+0x49e>
		__ticks = 1;
    1372:	81 e0       	ldi	r24, 0x01	; 1
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	98 ab       	std	Y+48, r25	; 0x30
    1378:	8f a7       	std	Y+47, r24	; 0x2f
    137a:	3f c0       	rjmp	.+126    	; 0x13fa <LCD_sendCommand+0x51c>
	else if (__tmp > 65535)
    137c:	69 a9       	ldd	r22, Y+49	; 0x31
    137e:	7a a9       	ldd	r23, Y+50	; 0x32
    1380:	8b a9       	ldd	r24, Y+51	; 0x33
    1382:	9c a9       	ldd	r25, Y+52	; 0x34
    1384:	20 e0       	ldi	r18, 0x00	; 0
    1386:	3f ef       	ldi	r19, 0xFF	; 255
    1388:	4f e7       	ldi	r20, 0x7F	; 127
    138a:	57 e4       	ldi	r21, 0x47	; 71
    138c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1390:	18 16       	cp	r1, r24
    1392:	4c f5       	brge	.+82     	; 0x13e6 <LCD_sendCommand+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1394:	6d a9       	ldd	r22, Y+53	; 0x35
    1396:	7e a9       	ldd	r23, Y+54	; 0x36
    1398:	8f a9       	ldd	r24, Y+55	; 0x37
    139a:	98 ad       	ldd	r25, Y+56	; 0x38
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	30 e0       	ldi	r19, 0x00	; 0
    13a0:	40 e2       	ldi	r20, 0x20	; 32
    13a2:	51 e4       	ldi	r21, 0x41	; 65
    13a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a8:	dc 01       	movw	r26, r24
    13aa:	cb 01       	movw	r24, r22
    13ac:	bc 01       	movw	r22, r24
    13ae:	cd 01       	movw	r24, r26
    13b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13b4:	dc 01       	movw	r26, r24
    13b6:	cb 01       	movw	r24, r22
    13b8:	98 ab       	std	Y+48, r25	; 0x30
    13ba:	8f a7       	std	Y+47, r24	; 0x2f
    13bc:	0f c0       	rjmp	.+30     	; 0x13dc <LCD_sendCommand+0x4fe>
    13be:	89 e1       	ldi	r24, 0x19	; 25
    13c0:	90 e0       	ldi	r25, 0x00	; 0
    13c2:	9e a7       	std	Y+46, r25	; 0x2e
    13c4:	8d a7       	std	Y+45, r24	; 0x2d
    13c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    13c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    13ca:	01 97       	sbiw	r24, 0x01	; 1
    13cc:	f1 f7       	brne	.-4      	; 0x13ca <LCD_sendCommand+0x4ec>
    13ce:	9e a7       	std	Y+46, r25	; 0x2e
    13d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    13d4:	98 a9       	ldd	r25, Y+48	; 0x30
    13d6:	01 97       	sbiw	r24, 0x01	; 1
    13d8:	98 ab       	std	Y+48, r25	; 0x30
    13da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    13de:	98 a9       	ldd	r25, Y+48	; 0x30
    13e0:	00 97       	sbiw	r24, 0x00	; 0
    13e2:	69 f7       	brne	.-38     	; 0x13be <LCD_sendCommand+0x4e0>
    13e4:	14 c0       	rjmp	.+40     	; 0x140e <LCD_sendCommand+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13e6:	69 a9       	ldd	r22, Y+49	; 0x31
    13e8:	7a a9       	ldd	r23, Y+50	; 0x32
    13ea:	8b a9       	ldd	r24, Y+51	; 0x33
    13ec:	9c a9       	ldd	r25, Y+52	; 0x34
    13ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f2:	dc 01       	movw	r26, r24
    13f4:	cb 01       	movw	r24, r22
    13f6:	98 ab       	std	Y+48, r25	; 0x30
    13f8:	8f a7       	std	Y+47, r24	; 0x2f
    13fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    13fc:	98 a9       	ldd	r25, Y+48	; 0x30
    13fe:	9c a7       	std	Y+44, r25	; 0x2c
    1400:	8b a7       	std	Y+43, r24	; 0x2b
    1402:	8b a5       	ldd	r24, Y+43	; 0x2b
    1404:	9c a5       	ldd	r25, Y+44	; 0x2c
    1406:	01 97       	sbiw	r24, 0x01	; 1
    1408:	f1 f7       	brne	.-4      	; 0x1406 <LCD_sendCommand+0x528>
    140a:	9c a7       	std	Y+44, r25	; 0x2c
    140c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    140e:	a2 e3       	ldi	r26, 0x32	; 50
    1410:	b0 e0       	ldi	r27, 0x00	; 0
    1412:	e2 e3       	ldi	r30, 0x32	; 50
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	80 81       	ld	r24, Z
    1418:	80 64       	ori	r24, 0x40	; 64
    141a:	8c 93       	st	X, r24
    141c:	80 e0       	ldi	r24, 0x00	; 0
    141e:	90 e0       	ldi	r25, 0x00	; 0
    1420:	a0 e8       	ldi	r26, 0x80	; 128
    1422:	bf e3       	ldi	r27, 0x3F	; 63
    1424:	8f a3       	std	Y+39, r24	; 0x27
    1426:	98 a7       	std	Y+40, r25	; 0x28
    1428:	a9 a7       	std	Y+41, r26	; 0x29
    142a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    142c:	6f a1       	ldd	r22, Y+39	; 0x27
    142e:	78 a5       	ldd	r23, Y+40	; 0x28
    1430:	89 a5       	ldd	r24, Y+41	; 0x29
    1432:	9a a5       	ldd	r25, Y+42	; 0x2a
    1434:	20 e0       	ldi	r18, 0x00	; 0
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	4a e7       	ldi	r20, 0x7A	; 122
    143a:	53 e4       	ldi	r21, 0x43	; 67
    143c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1440:	dc 01       	movw	r26, r24
    1442:	cb 01       	movw	r24, r22
    1444:	8b a3       	std	Y+35, r24	; 0x23
    1446:	9c a3       	std	Y+36, r25	; 0x24
    1448:	ad a3       	std	Y+37, r26	; 0x25
    144a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    144c:	6b a1       	ldd	r22, Y+35	; 0x23
    144e:	7c a1       	ldd	r23, Y+36	; 0x24
    1450:	8d a1       	ldd	r24, Y+37	; 0x25
    1452:	9e a1       	ldd	r25, Y+38	; 0x26
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	40 e8       	ldi	r20, 0x80	; 128
    145a:	5f e3       	ldi	r21, 0x3F	; 63
    145c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1460:	88 23       	and	r24, r24
    1462:	2c f4       	brge	.+10     	; 0x146e <LCD_sendCommand+0x590>
		__ticks = 1;
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	9a a3       	std	Y+34, r25	; 0x22
    146a:	89 a3       	std	Y+33, r24	; 0x21
    146c:	3f c0       	rjmp	.+126    	; 0x14ec <LCD_sendCommand+0x60e>
	else if (__tmp > 65535)
    146e:	6b a1       	ldd	r22, Y+35	; 0x23
    1470:	7c a1       	ldd	r23, Y+36	; 0x24
    1472:	8d a1       	ldd	r24, Y+37	; 0x25
    1474:	9e a1       	ldd	r25, Y+38	; 0x26
    1476:	20 e0       	ldi	r18, 0x00	; 0
    1478:	3f ef       	ldi	r19, 0xFF	; 255
    147a:	4f e7       	ldi	r20, 0x7F	; 127
    147c:	57 e4       	ldi	r21, 0x47	; 71
    147e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1482:	18 16       	cp	r1, r24
    1484:	4c f5       	brge	.+82     	; 0x14d8 <LCD_sendCommand+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1486:	6f a1       	ldd	r22, Y+39	; 0x27
    1488:	78 a5       	ldd	r23, Y+40	; 0x28
    148a:	89 a5       	ldd	r24, Y+41	; 0x29
    148c:	9a a5       	ldd	r25, Y+42	; 0x2a
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	30 e0       	ldi	r19, 0x00	; 0
    1492:	40 e2       	ldi	r20, 0x20	; 32
    1494:	51 e4       	ldi	r21, 0x41	; 65
    1496:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    149a:	dc 01       	movw	r26, r24
    149c:	cb 01       	movw	r24, r22
    149e:	bc 01       	movw	r22, r24
    14a0:	cd 01       	movw	r24, r26
    14a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14a6:	dc 01       	movw	r26, r24
    14a8:	cb 01       	movw	r24, r22
    14aa:	9a a3       	std	Y+34, r25	; 0x22
    14ac:	89 a3       	std	Y+33, r24	; 0x21
    14ae:	0f c0       	rjmp	.+30     	; 0x14ce <LCD_sendCommand+0x5f0>
    14b0:	89 e1       	ldi	r24, 0x19	; 25
    14b2:	90 e0       	ldi	r25, 0x00	; 0
    14b4:	98 a3       	std	Y+32, r25	; 0x20
    14b6:	8f 8f       	std	Y+31, r24	; 0x1f
    14b8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    14ba:	98 a1       	ldd	r25, Y+32	; 0x20
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	f1 f7       	brne	.-4      	; 0x14bc <LCD_sendCommand+0x5de>
    14c0:	98 a3       	std	Y+32, r25	; 0x20
    14c2:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14c4:	89 a1       	ldd	r24, Y+33	; 0x21
    14c6:	9a a1       	ldd	r25, Y+34	; 0x22
    14c8:	01 97       	sbiw	r24, 0x01	; 1
    14ca:	9a a3       	std	Y+34, r25	; 0x22
    14cc:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14ce:	89 a1       	ldd	r24, Y+33	; 0x21
    14d0:	9a a1       	ldd	r25, Y+34	; 0x22
    14d2:	00 97       	sbiw	r24, 0x00	; 0
    14d4:	69 f7       	brne	.-38     	; 0x14b0 <LCD_sendCommand+0x5d2>
    14d6:	14 c0       	rjmp	.+40     	; 0x1500 <LCD_sendCommand+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14d8:	6b a1       	ldd	r22, Y+35	; 0x23
    14da:	7c a1       	ldd	r23, Y+36	; 0x24
    14dc:	8d a1       	ldd	r24, Y+37	; 0x25
    14de:	9e a1       	ldd	r25, Y+38	; 0x26
    14e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e4:	dc 01       	movw	r26, r24
    14e6:	cb 01       	movw	r24, r22
    14e8:	9a a3       	std	Y+34, r25	; 0x22
    14ea:	89 a3       	std	Y+33, r24	; 0x21
    14ec:	89 a1       	ldd	r24, Y+33	; 0x21
    14ee:	9a a1       	ldd	r25, Y+34	; 0x22
    14f0:	9e 8f       	std	Y+30, r25	; 0x1e
    14f2:	8d 8f       	std	Y+29, r24	; 0x1d
    14f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14f6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	f1 f7       	brne	.-4      	; 0x14f8 <LCD_sendCommand+0x61a>
    14fc:	9e 8f       	std	Y+30, r25	; 0x1e
    14fe:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required command to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((command & 0x0F) << 4);
    1500:	a5 e3       	ldi	r26, 0x35	; 53
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e5 e3       	ldi	r30, 0x35	; 53
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	80 81       	ld	r24, Z
    150a:	28 2f       	mov	r18, r24
    150c:	2f 70       	andi	r18, 0x0F	; 15
    150e:	fe 01       	movw	r30, r28
    1510:	ed 59       	subi	r30, 0x9D	; 157
    1512:	ff 4f       	sbci	r31, 0xFF	; 255
    1514:	80 81       	ld	r24, Z
    1516:	88 2f       	mov	r24, r24
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	82 95       	swap	r24
    151c:	92 95       	swap	r25
    151e:	90 7f       	andi	r25, 0xF0	; 240
    1520:	98 27       	eor	r25, r24
    1522:	80 7f       	andi	r24, 0xF0	; 240
    1524:	98 27       	eor	r25, r24
    1526:	82 2b       	or	r24, r18
    1528:	8c 93       	st	X, r24
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	a0 e8       	ldi	r26, 0x80	; 128
    1530:	bf e3       	ldi	r27, 0x3F	; 63
    1532:	89 8f       	std	Y+25, r24	; 0x19
    1534:	9a 8f       	std	Y+26, r25	; 0x1a
    1536:	ab 8f       	std	Y+27, r26	; 0x1b
    1538:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    153a:	69 8d       	ldd	r22, Y+25	; 0x19
    153c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    153e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1540:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1542:	20 e0       	ldi	r18, 0x00	; 0
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	4a e7       	ldi	r20, 0x7A	; 122
    1548:	53 e4       	ldi	r21, 0x43	; 67
    154a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    154e:	dc 01       	movw	r26, r24
    1550:	cb 01       	movw	r24, r22
    1552:	8d 8b       	std	Y+21, r24	; 0x15
    1554:	9e 8b       	std	Y+22, r25	; 0x16
    1556:	af 8b       	std	Y+23, r26	; 0x17
    1558:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    155a:	6d 89       	ldd	r22, Y+21	; 0x15
    155c:	7e 89       	ldd	r23, Y+22	; 0x16
    155e:	8f 89       	ldd	r24, Y+23	; 0x17
    1560:	98 8d       	ldd	r25, Y+24	; 0x18
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	40 e8       	ldi	r20, 0x80	; 128
    1568:	5f e3       	ldi	r21, 0x3F	; 63
    156a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    156e:	88 23       	and	r24, r24
    1570:	2c f4       	brge	.+10     	; 0x157c <LCD_sendCommand+0x69e>
		__ticks = 1;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	9c 8b       	std	Y+20, r25	; 0x14
    1578:	8b 8b       	std	Y+19, r24	; 0x13
    157a:	3f c0       	rjmp	.+126    	; 0x15fa <LCD_sendCommand+0x71c>
	else if (__tmp > 65535)
    157c:	6d 89       	ldd	r22, Y+21	; 0x15
    157e:	7e 89       	ldd	r23, Y+22	; 0x16
    1580:	8f 89       	ldd	r24, Y+23	; 0x17
    1582:	98 8d       	ldd	r25, Y+24	; 0x18
    1584:	20 e0       	ldi	r18, 0x00	; 0
    1586:	3f ef       	ldi	r19, 0xFF	; 255
    1588:	4f e7       	ldi	r20, 0x7F	; 127
    158a:	57 e4       	ldi	r21, 0x47	; 71
    158c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1590:	18 16       	cp	r1, r24
    1592:	4c f5       	brge	.+82     	; 0x15e6 <LCD_sendCommand+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1594:	69 8d       	ldd	r22, Y+25	; 0x19
    1596:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1598:	8b 8d       	ldd	r24, Y+27	; 0x1b
    159a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    159c:	20 e0       	ldi	r18, 0x00	; 0
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	40 e2       	ldi	r20, 0x20	; 32
    15a2:	51 e4       	ldi	r21, 0x41	; 65
    15a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a8:	dc 01       	movw	r26, r24
    15aa:	cb 01       	movw	r24, r22
    15ac:	bc 01       	movw	r22, r24
    15ae:	cd 01       	movw	r24, r26
    15b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	9c 8b       	std	Y+20, r25	; 0x14
    15ba:	8b 8b       	std	Y+19, r24	; 0x13
    15bc:	0f c0       	rjmp	.+30     	; 0x15dc <LCD_sendCommand+0x6fe>
    15be:	89 e1       	ldi	r24, 0x19	; 25
    15c0:	90 e0       	ldi	r25, 0x00	; 0
    15c2:	9a 8b       	std	Y+18, r25	; 0x12
    15c4:	89 8b       	std	Y+17, r24	; 0x11
    15c6:	89 89       	ldd	r24, Y+17	; 0x11
    15c8:	9a 89       	ldd	r25, Y+18	; 0x12
    15ca:	01 97       	sbiw	r24, 0x01	; 1
    15cc:	f1 f7       	brne	.-4      	; 0x15ca <LCD_sendCommand+0x6ec>
    15ce:	9a 8b       	std	Y+18, r25	; 0x12
    15d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15d2:	8b 89       	ldd	r24, Y+19	; 0x13
    15d4:	9c 89       	ldd	r25, Y+20	; 0x14
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	9c 8b       	std	Y+20, r25	; 0x14
    15da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15dc:	8b 89       	ldd	r24, Y+19	; 0x13
    15de:	9c 89       	ldd	r25, Y+20	; 0x14
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	69 f7       	brne	.-38     	; 0x15be <LCD_sendCommand+0x6e0>
    15e4:	14 c0       	rjmp	.+40     	; 0x160e <LCD_sendCommand+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15e6:	6d 89       	ldd	r22, Y+21	; 0x15
    15e8:	7e 89       	ldd	r23, Y+22	; 0x16
    15ea:	8f 89       	ldd	r24, Y+23	; 0x17
    15ec:	98 8d       	ldd	r25, Y+24	; 0x18
    15ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15f2:	dc 01       	movw	r26, r24
    15f4:	cb 01       	movw	r24, r22
    15f6:	9c 8b       	std	Y+20, r25	; 0x14
    15f8:	8b 8b       	std	Y+19, r24	; 0x13
    15fa:	8b 89       	ldd	r24, Y+19	; 0x13
    15fc:	9c 89       	ldd	r25, Y+20	; 0x14
    15fe:	98 8b       	std	Y+16, r25	; 0x10
    1600:	8f 87       	std	Y+15, r24	; 0x0f
    1602:	8f 85       	ldd	r24, Y+15	; 0x0f
    1604:	98 89       	ldd	r25, Y+16	; 0x10
    1606:	01 97       	sbiw	r24, 0x01	; 1
    1608:	f1 f7       	brne	.-4      	; 0x1606 <LCD_sendCommand+0x728>
    160a:	98 8b       	std	Y+16, r25	; 0x10
    160c:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (command & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    160e:	a2 e3       	ldi	r26, 0x32	; 50
    1610:	b0 e0       	ldi	r27, 0x00	; 0
    1612:	e2 e3       	ldi	r30, 0x32	; 50
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	8f 7b       	andi	r24, 0xBF	; 191
    161a:	8c 93       	st	X, r24
    161c:	80 e0       	ldi	r24, 0x00	; 0
    161e:	90 e0       	ldi	r25, 0x00	; 0
    1620:	a0 e8       	ldi	r26, 0x80	; 128
    1622:	bf e3       	ldi	r27, 0x3F	; 63
    1624:	8b 87       	std	Y+11, r24	; 0x0b
    1626:	9c 87       	std	Y+12, r25	; 0x0c
    1628:	ad 87       	std	Y+13, r26	; 0x0d
    162a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    162c:	6b 85       	ldd	r22, Y+11	; 0x0b
    162e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1630:	8d 85       	ldd	r24, Y+13	; 0x0d
    1632:	9e 85       	ldd	r25, Y+14	; 0x0e
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	4a e7       	ldi	r20, 0x7A	; 122
    163a:	53 e4       	ldi	r21, 0x43	; 67
    163c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1640:	dc 01       	movw	r26, r24
    1642:	cb 01       	movw	r24, r22
    1644:	8f 83       	std	Y+7, r24	; 0x07
    1646:	98 87       	std	Y+8, r25	; 0x08
    1648:	a9 87       	std	Y+9, r26	; 0x09
    164a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    164c:	6f 81       	ldd	r22, Y+7	; 0x07
    164e:	78 85       	ldd	r23, Y+8	; 0x08
    1650:	89 85       	ldd	r24, Y+9	; 0x09
    1652:	9a 85       	ldd	r25, Y+10	; 0x0a
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	40 e8       	ldi	r20, 0x80	; 128
    165a:	5f e3       	ldi	r21, 0x3F	; 63
    165c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1660:	88 23       	and	r24, r24
    1662:	2c f4       	brge	.+10     	; 0x166e <LCD_sendCommand+0x790>
		__ticks = 1;
    1664:	81 e0       	ldi	r24, 0x01	; 1
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	9e 83       	std	Y+6, r25	; 0x06
    166a:	8d 83       	std	Y+5, r24	; 0x05
    166c:	3f c0       	rjmp	.+126    	; 0x16ec <LCD_sendCommand+0x80e>
	else if (__tmp > 65535)
    166e:	6f 81       	ldd	r22, Y+7	; 0x07
    1670:	78 85       	ldd	r23, Y+8	; 0x08
    1672:	89 85       	ldd	r24, Y+9	; 0x09
    1674:	9a 85       	ldd	r25, Y+10	; 0x0a
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	3f ef       	ldi	r19, 0xFF	; 255
    167a:	4f e7       	ldi	r20, 0x7F	; 127
    167c:	57 e4       	ldi	r21, 0x47	; 71
    167e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1682:	18 16       	cp	r1, r24
    1684:	4c f5       	brge	.+82     	; 0x16d8 <LCD_sendCommand+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1686:	6b 85       	ldd	r22, Y+11	; 0x0b
    1688:	7c 85       	ldd	r23, Y+12	; 0x0c
    168a:	8d 85       	ldd	r24, Y+13	; 0x0d
    168c:	9e 85       	ldd	r25, Y+14	; 0x0e
    168e:	20 e0       	ldi	r18, 0x00	; 0
    1690:	30 e0       	ldi	r19, 0x00	; 0
    1692:	40 e2       	ldi	r20, 0x20	; 32
    1694:	51 e4       	ldi	r21, 0x41	; 65
    1696:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    169a:	dc 01       	movw	r26, r24
    169c:	cb 01       	movw	r24, r22
    169e:	bc 01       	movw	r22, r24
    16a0:	cd 01       	movw	r24, r26
    16a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16a6:	dc 01       	movw	r26, r24
    16a8:	cb 01       	movw	r24, r22
    16aa:	9e 83       	std	Y+6, r25	; 0x06
    16ac:	8d 83       	std	Y+5, r24	; 0x05
    16ae:	0f c0       	rjmp	.+30     	; 0x16ce <LCD_sendCommand+0x7f0>
    16b0:	89 e1       	ldi	r24, 0x19	; 25
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	9c 83       	std	Y+4, r25	; 0x04
    16b6:	8b 83       	std	Y+3, r24	; 0x03
    16b8:	8b 81       	ldd	r24, Y+3	; 0x03
    16ba:	9c 81       	ldd	r25, Y+4	; 0x04
    16bc:	01 97       	sbiw	r24, 0x01	; 1
    16be:	f1 f7       	brne	.-4      	; 0x16bc <LCD_sendCommand+0x7de>
    16c0:	9c 83       	std	Y+4, r25	; 0x04
    16c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16c4:	8d 81       	ldd	r24, Y+5	; 0x05
    16c6:	9e 81       	ldd	r25, Y+6	; 0x06
    16c8:	01 97       	sbiw	r24, 0x01	; 1
    16ca:	9e 83       	std	Y+6, r25	; 0x06
    16cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16ce:	8d 81       	ldd	r24, Y+5	; 0x05
    16d0:	9e 81       	ldd	r25, Y+6	; 0x06
    16d2:	00 97       	sbiw	r24, 0x00	; 0
    16d4:	69 f7       	brne	.-38     	; 0x16b0 <LCD_sendCommand+0x7d2>
    16d6:	14 c0       	rjmp	.+40     	; 0x1700 <LCD_sendCommand+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d8:	6f 81       	ldd	r22, Y+7	; 0x07
    16da:	78 85       	ldd	r23, Y+8	; 0x08
    16dc:	89 85       	ldd	r24, Y+9	; 0x09
    16de:	9a 85       	ldd	r25, Y+10	; 0x0a
    16e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16e4:	dc 01       	movw	r26, r24
    16e6:	cb 01       	movw	r24, r22
    16e8:	9e 83       	std	Y+6, r25	; 0x06
    16ea:	8d 83       	std	Y+5, r24	; 0x05
    16ec:	8d 81       	ldd	r24, Y+5	; 0x05
    16ee:	9e 81       	ldd	r25, Y+6	; 0x06
    16f0:	9a 83       	std	Y+2, r25	; 0x02
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	9a 81       	ldd	r25, Y+2	; 0x02
    16f8:	01 97       	sbiw	r24, 0x01	; 1
    16fa:	f1 f7       	brne	.-4      	; 0x16f8 <LCD_sendCommand+0x81a>
    16fc:	9a 83       	std	Y+2, r25	; 0x02
    16fe:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1700:	cd 59       	subi	r28, 0x9D	; 157
    1702:	df 4f       	sbci	r29, 0xFF	; 255
    1704:	0f b6       	in	r0, 0x3f	; 63
    1706:	f8 94       	cli
    1708:	de bf       	out	0x3e, r29	; 62
    170a:	0f be       	out	0x3f, r0	; 63
    170c:	cd bf       	out	0x3d, r28	; 61
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	1f 91       	pop	r17
    1714:	0f 91       	pop	r16
    1716:	08 95       	ret

00001718 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1718:	0f 93       	push	r16
    171a:	1f 93       	push	r17
    171c:	df 93       	push	r29
    171e:	cf 93       	push	r28
    1720:	cd b7       	in	r28, 0x3d	; 61
    1722:	de b7       	in	r29, 0x3e	; 62
    1724:	c3 56       	subi	r28, 0x63	; 99
    1726:	d0 40       	sbci	r29, 0x00	; 0
    1728:	0f b6       	in	r0, 0x3f	; 63
    172a:	f8 94       	cli
    172c:	de bf       	out	0x3e, r29	; 62
    172e:	0f be       	out	0x3f, r0	; 63
    1730:	cd bf       	out	0x3d, r28	; 61
    1732:	fe 01       	movw	r30, r28
    1734:	ed 59       	subi	r30, 0x9D	; 157
    1736:	ff 4f       	sbci	r31, 0xFF	; 255
    1738:	80 83       	st	Z, r24
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    173a:	a2 e3       	ldi	r26, 0x32	; 50
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e2 e3       	ldi	r30, 0x32	; 50
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	80 61       	ori	r24, 0x10	; 16
    1746:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1748:	a2 e3       	ldi	r26, 0x32	; 50
    174a:	b0 e0       	ldi	r27, 0x00	; 0
    174c:	e2 e3       	ldi	r30, 0x32	; 50
    174e:	f0 e0       	ldi	r31, 0x00	; 0
    1750:	80 81       	ld	r24, Z
    1752:	8f 7d       	andi	r24, 0xDF	; 223
    1754:	8c 93       	st	X, r24
    1756:	fe 01       	movw	r30, r28
    1758:	e1 5a       	subi	r30, 0xA1	; 161
    175a:	ff 4f       	sbci	r31, 0xFF	; 255
    175c:	80 e0       	ldi	r24, 0x00	; 0
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	a0 e8       	ldi	r26, 0x80	; 128
    1762:	bf e3       	ldi	r27, 0x3F	; 63
    1764:	80 83       	st	Z, r24
    1766:	91 83       	std	Z+1, r25	; 0x01
    1768:	a2 83       	std	Z+2, r26	; 0x02
    176a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    176c:	8e 01       	movw	r16, r28
    176e:	05 5a       	subi	r16, 0xA5	; 165
    1770:	1f 4f       	sbci	r17, 0xFF	; 255
    1772:	fe 01       	movw	r30, r28
    1774:	e1 5a       	subi	r30, 0xA1	; 161
    1776:	ff 4f       	sbci	r31, 0xFF	; 255
    1778:	60 81       	ld	r22, Z
    177a:	71 81       	ldd	r23, Z+1	; 0x01
    177c:	82 81       	ldd	r24, Z+2	; 0x02
    177e:	93 81       	ldd	r25, Z+3	; 0x03
    1780:	20 e0       	ldi	r18, 0x00	; 0
    1782:	30 e0       	ldi	r19, 0x00	; 0
    1784:	4a e7       	ldi	r20, 0x7A	; 122
    1786:	53 e4       	ldi	r21, 0x43	; 67
    1788:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178c:	dc 01       	movw	r26, r24
    178e:	cb 01       	movw	r24, r22
    1790:	f8 01       	movw	r30, r16
    1792:	80 83       	st	Z, r24
    1794:	91 83       	std	Z+1, r25	; 0x01
    1796:	a2 83       	std	Z+2, r26	; 0x02
    1798:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    179a:	fe 01       	movw	r30, r28
    179c:	e5 5a       	subi	r30, 0xA5	; 165
    179e:	ff 4f       	sbci	r31, 0xFF	; 255
    17a0:	60 81       	ld	r22, Z
    17a2:	71 81       	ldd	r23, Z+1	; 0x01
    17a4:	82 81       	ldd	r24, Z+2	; 0x02
    17a6:	93 81       	ldd	r25, Z+3	; 0x03
    17a8:	20 e0       	ldi	r18, 0x00	; 0
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	40 e8       	ldi	r20, 0x80	; 128
    17ae:	5f e3       	ldi	r21, 0x3F	; 63
    17b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17b4:	88 23       	and	r24, r24
    17b6:	44 f4       	brge	.+16     	; 0x17c8 <LCD_displayCharacter+0xb0>
		__ticks = 1;
    17b8:	fe 01       	movw	r30, r28
    17ba:	e7 5a       	subi	r30, 0xA7	; 167
    17bc:	ff 4f       	sbci	r31, 0xFF	; 255
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	91 83       	std	Z+1, r25	; 0x01
    17c4:	80 83       	st	Z, r24
    17c6:	64 c0       	rjmp	.+200    	; 0x1890 <LCD_displayCharacter+0x178>
	else if (__tmp > 65535)
    17c8:	fe 01       	movw	r30, r28
    17ca:	e5 5a       	subi	r30, 0xA5	; 165
    17cc:	ff 4f       	sbci	r31, 0xFF	; 255
    17ce:	60 81       	ld	r22, Z
    17d0:	71 81       	ldd	r23, Z+1	; 0x01
    17d2:	82 81       	ldd	r24, Z+2	; 0x02
    17d4:	93 81       	ldd	r25, Z+3	; 0x03
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	3f ef       	ldi	r19, 0xFF	; 255
    17da:	4f e7       	ldi	r20, 0x7F	; 127
    17dc:	57 e4       	ldi	r21, 0x47	; 71
    17de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17e2:	18 16       	cp	r1, r24
    17e4:	0c f0       	brlt	.+2      	; 0x17e8 <LCD_displayCharacter+0xd0>
    17e6:	43 c0       	rjmp	.+134    	; 0x186e <LCD_displayCharacter+0x156>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e8:	fe 01       	movw	r30, r28
    17ea:	e1 5a       	subi	r30, 0xA1	; 161
    17ec:	ff 4f       	sbci	r31, 0xFF	; 255
    17ee:	60 81       	ld	r22, Z
    17f0:	71 81       	ldd	r23, Z+1	; 0x01
    17f2:	82 81       	ldd	r24, Z+2	; 0x02
    17f4:	93 81       	ldd	r25, Z+3	; 0x03
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e2       	ldi	r20, 0x20	; 32
    17fc:	51 e4       	ldi	r21, 0x41	; 65
    17fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1802:	dc 01       	movw	r26, r24
    1804:	cb 01       	movw	r24, r22
    1806:	8e 01       	movw	r16, r28
    1808:	07 5a       	subi	r16, 0xA7	; 167
    180a:	1f 4f       	sbci	r17, 0xFF	; 255
    180c:	bc 01       	movw	r22, r24
    180e:	cd 01       	movw	r24, r26
    1810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	f8 01       	movw	r30, r16
    181a:	91 83       	std	Z+1, r25	; 0x01
    181c:	80 83       	st	Z, r24
    181e:	1f c0       	rjmp	.+62     	; 0x185e <LCD_displayCharacter+0x146>
    1820:	fe 01       	movw	r30, r28
    1822:	e9 5a       	subi	r30, 0xA9	; 169
    1824:	ff 4f       	sbci	r31, 0xFF	; 255
    1826:	89 e1       	ldi	r24, 0x19	; 25
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	91 83       	std	Z+1, r25	; 0x01
    182c:	80 83       	st	Z, r24
    182e:	fe 01       	movw	r30, r28
    1830:	e9 5a       	subi	r30, 0xA9	; 169
    1832:	ff 4f       	sbci	r31, 0xFF	; 255
    1834:	80 81       	ld	r24, Z
    1836:	91 81       	ldd	r25, Z+1	; 0x01
    1838:	01 97       	sbiw	r24, 0x01	; 1
    183a:	f1 f7       	brne	.-4      	; 0x1838 <LCD_displayCharacter+0x120>
    183c:	fe 01       	movw	r30, r28
    183e:	e9 5a       	subi	r30, 0xA9	; 169
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	91 83       	std	Z+1, r25	; 0x01
    1844:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1846:	de 01       	movw	r26, r28
    1848:	a7 5a       	subi	r26, 0xA7	; 167
    184a:	bf 4f       	sbci	r27, 0xFF	; 255
    184c:	fe 01       	movw	r30, r28
    184e:	e7 5a       	subi	r30, 0xA7	; 167
    1850:	ff 4f       	sbci	r31, 0xFF	; 255
    1852:	80 81       	ld	r24, Z
    1854:	91 81       	ldd	r25, Z+1	; 0x01
    1856:	01 97       	sbiw	r24, 0x01	; 1
    1858:	11 96       	adiw	r26, 0x01	; 1
    185a:	9c 93       	st	X, r25
    185c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185e:	fe 01       	movw	r30, r28
    1860:	e7 5a       	subi	r30, 0xA7	; 167
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	80 81       	ld	r24, Z
    1866:	91 81       	ldd	r25, Z+1	; 0x01
    1868:	00 97       	sbiw	r24, 0x00	; 0
    186a:	d1 f6       	brne	.-76     	; 0x1820 <LCD_displayCharacter+0x108>
    186c:	27 c0       	rjmp	.+78     	; 0x18bc <LCD_displayCharacter+0x1a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186e:	8e 01       	movw	r16, r28
    1870:	07 5a       	subi	r16, 0xA7	; 167
    1872:	1f 4f       	sbci	r17, 0xFF	; 255
    1874:	fe 01       	movw	r30, r28
    1876:	e5 5a       	subi	r30, 0xA5	; 165
    1878:	ff 4f       	sbci	r31, 0xFF	; 255
    187a:	60 81       	ld	r22, Z
    187c:	71 81       	ldd	r23, Z+1	; 0x01
    187e:	82 81       	ldd	r24, Z+2	; 0x02
    1880:	93 81       	ldd	r25, Z+3	; 0x03
    1882:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1886:	dc 01       	movw	r26, r24
    1888:	cb 01       	movw	r24, r22
    188a:	f8 01       	movw	r30, r16
    188c:	91 83       	std	Z+1, r25	; 0x01
    188e:	80 83       	st	Z, r24
    1890:	de 01       	movw	r26, r28
    1892:	ab 5a       	subi	r26, 0xAB	; 171
    1894:	bf 4f       	sbci	r27, 0xFF	; 255
    1896:	fe 01       	movw	r30, r28
    1898:	e7 5a       	subi	r30, 0xA7	; 167
    189a:	ff 4f       	sbci	r31, 0xFF	; 255
    189c:	80 81       	ld	r24, Z
    189e:	91 81       	ldd	r25, Z+1	; 0x01
    18a0:	8d 93       	st	X+, r24
    18a2:	9c 93       	st	X, r25
    18a4:	fe 01       	movw	r30, r28
    18a6:	eb 5a       	subi	r30, 0xAB	; 171
    18a8:	ff 4f       	sbci	r31, 0xFF	; 255
    18aa:	80 81       	ld	r24, Z
    18ac:	91 81       	ldd	r25, Z+1	; 0x01
    18ae:	01 97       	sbiw	r24, 0x01	; 1
    18b0:	f1 f7       	brne	.-4      	; 0x18ae <LCD_displayCharacter+0x196>
    18b2:	fe 01       	movw	r30, r28
    18b4:	eb 5a       	subi	r30, 0xAB	; 171
    18b6:	ff 4f       	sbci	r31, 0xFF	; 255
    18b8:	91 83       	std	Z+1, r25	; 0x01
    18ba:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    18bc:	a2 e3       	ldi	r26, 0x32	; 50
    18be:	b0 e0       	ldi	r27, 0x00	; 0
    18c0:	e2 e3       	ldi	r30, 0x32	; 50
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	80 64       	ori	r24, 0x40	; 64
    18c8:	8c 93       	st	X, r24
    18ca:	fe 01       	movw	r30, r28
    18cc:	ef 5a       	subi	r30, 0xAF	; 175
    18ce:	ff 4f       	sbci	r31, 0xFF	; 255
    18d0:	80 e0       	ldi	r24, 0x00	; 0
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	a0 e8       	ldi	r26, 0x80	; 128
    18d6:	bf e3       	ldi	r27, 0x3F	; 63
    18d8:	80 83       	st	Z, r24
    18da:	91 83       	std	Z+1, r25	; 0x01
    18dc:	a2 83       	std	Z+2, r26	; 0x02
    18de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18e0:	8e 01       	movw	r16, r28
    18e2:	03 5b       	subi	r16, 0xB3	; 179
    18e4:	1f 4f       	sbci	r17, 0xFF	; 255
    18e6:	fe 01       	movw	r30, r28
    18e8:	ef 5a       	subi	r30, 0xAF	; 175
    18ea:	ff 4f       	sbci	r31, 0xFF	; 255
    18ec:	60 81       	ld	r22, Z
    18ee:	71 81       	ldd	r23, Z+1	; 0x01
    18f0:	82 81       	ldd	r24, Z+2	; 0x02
    18f2:	93 81       	ldd	r25, Z+3	; 0x03
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	4a e7       	ldi	r20, 0x7A	; 122
    18fa:	53 e4       	ldi	r21, 0x43	; 67
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	f8 01       	movw	r30, r16
    1906:	80 83       	st	Z, r24
    1908:	91 83       	std	Z+1, r25	; 0x01
    190a:	a2 83       	std	Z+2, r26	; 0x02
    190c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    190e:	fe 01       	movw	r30, r28
    1910:	e3 5b       	subi	r30, 0xB3	; 179
    1912:	ff 4f       	sbci	r31, 0xFF	; 255
    1914:	60 81       	ld	r22, Z
    1916:	71 81       	ldd	r23, Z+1	; 0x01
    1918:	82 81       	ldd	r24, Z+2	; 0x02
    191a:	93 81       	ldd	r25, Z+3	; 0x03
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	40 e8       	ldi	r20, 0x80	; 128
    1922:	5f e3       	ldi	r21, 0x3F	; 63
    1924:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1928:	88 23       	and	r24, r24
    192a:	44 f4       	brge	.+16     	; 0x193c <LCD_displayCharacter+0x224>
		__ticks = 1;
    192c:	fe 01       	movw	r30, r28
    192e:	e5 5b       	subi	r30, 0xB5	; 181
    1930:	ff 4f       	sbci	r31, 0xFF	; 255
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	90 e0       	ldi	r25, 0x00	; 0
    1936:	91 83       	std	Z+1, r25	; 0x01
    1938:	80 83       	st	Z, r24
    193a:	64 c0       	rjmp	.+200    	; 0x1a04 <LCD_displayCharacter+0x2ec>
	else if (__tmp > 65535)
    193c:	fe 01       	movw	r30, r28
    193e:	e3 5b       	subi	r30, 0xB3	; 179
    1940:	ff 4f       	sbci	r31, 0xFF	; 255
    1942:	60 81       	ld	r22, Z
    1944:	71 81       	ldd	r23, Z+1	; 0x01
    1946:	82 81       	ldd	r24, Z+2	; 0x02
    1948:	93 81       	ldd	r25, Z+3	; 0x03
    194a:	20 e0       	ldi	r18, 0x00	; 0
    194c:	3f ef       	ldi	r19, 0xFF	; 255
    194e:	4f e7       	ldi	r20, 0x7F	; 127
    1950:	57 e4       	ldi	r21, 0x47	; 71
    1952:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1956:	18 16       	cp	r1, r24
    1958:	0c f0       	brlt	.+2      	; 0x195c <LCD_displayCharacter+0x244>
    195a:	43 c0       	rjmp	.+134    	; 0x19e2 <LCD_displayCharacter+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    195c:	fe 01       	movw	r30, r28
    195e:	ef 5a       	subi	r30, 0xAF	; 175
    1960:	ff 4f       	sbci	r31, 0xFF	; 255
    1962:	60 81       	ld	r22, Z
    1964:	71 81       	ldd	r23, Z+1	; 0x01
    1966:	82 81       	ldd	r24, Z+2	; 0x02
    1968:	93 81       	ldd	r25, Z+3	; 0x03
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	40 e2       	ldi	r20, 0x20	; 32
    1970:	51 e4       	ldi	r21, 0x41	; 65
    1972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1976:	dc 01       	movw	r26, r24
    1978:	cb 01       	movw	r24, r22
    197a:	8e 01       	movw	r16, r28
    197c:	05 5b       	subi	r16, 0xB5	; 181
    197e:	1f 4f       	sbci	r17, 0xFF	; 255
    1980:	bc 01       	movw	r22, r24
    1982:	cd 01       	movw	r24, r26
    1984:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1988:	dc 01       	movw	r26, r24
    198a:	cb 01       	movw	r24, r22
    198c:	f8 01       	movw	r30, r16
    198e:	91 83       	std	Z+1, r25	; 0x01
    1990:	80 83       	st	Z, r24
    1992:	1f c0       	rjmp	.+62     	; 0x19d2 <LCD_displayCharacter+0x2ba>
    1994:	fe 01       	movw	r30, r28
    1996:	e7 5b       	subi	r30, 0xB7	; 183
    1998:	ff 4f       	sbci	r31, 0xFF	; 255
    199a:	89 e1       	ldi	r24, 0x19	; 25
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	91 83       	std	Z+1, r25	; 0x01
    19a0:	80 83       	st	Z, r24
    19a2:	fe 01       	movw	r30, r28
    19a4:	e7 5b       	subi	r30, 0xB7	; 183
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	80 81       	ld	r24, Z
    19aa:	91 81       	ldd	r25, Z+1	; 0x01
    19ac:	01 97       	sbiw	r24, 0x01	; 1
    19ae:	f1 f7       	brne	.-4      	; 0x19ac <LCD_displayCharacter+0x294>
    19b0:	fe 01       	movw	r30, r28
    19b2:	e7 5b       	subi	r30, 0xB7	; 183
    19b4:	ff 4f       	sbci	r31, 0xFF	; 255
    19b6:	91 83       	std	Z+1, r25	; 0x01
    19b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ba:	de 01       	movw	r26, r28
    19bc:	a5 5b       	subi	r26, 0xB5	; 181
    19be:	bf 4f       	sbci	r27, 0xFF	; 255
    19c0:	fe 01       	movw	r30, r28
    19c2:	e5 5b       	subi	r30, 0xB5	; 181
    19c4:	ff 4f       	sbci	r31, 0xFF	; 255
    19c6:	80 81       	ld	r24, Z
    19c8:	91 81       	ldd	r25, Z+1	; 0x01
    19ca:	01 97       	sbiw	r24, 0x01	; 1
    19cc:	11 96       	adiw	r26, 0x01	; 1
    19ce:	9c 93       	st	X, r25
    19d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19d2:	fe 01       	movw	r30, r28
    19d4:	e5 5b       	subi	r30, 0xB5	; 181
    19d6:	ff 4f       	sbci	r31, 0xFF	; 255
    19d8:	80 81       	ld	r24, Z
    19da:	91 81       	ldd	r25, Z+1	; 0x01
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	d1 f6       	brne	.-76     	; 0x1994 <LCD_displayCharacter+0x27c>
    19e0:	27 c0       	rjmp	.+78     	; 0x1a30 <LCD_displayCharacter+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19e2:	8e 01       	movw	r16, r28
    19e4:	05 5b       	subi	r16, 0xB5	; 181
    19e6:	1f 4f       	sbci	r17, 0xFF	; 255
    19e8:	fe 01       	movw	r30, r28
    19ea:	e3 5b       	subi	r30, 0xB3	; 179
    19ec:	ff 4f       	sbci	r31, 0xFF	; 255
    19ee:	60 81       	ld	r22, Z
    19f0:	71 81       	ldd	r23, Z+1	; 0x01
    19f2:	82 81       	ldd	r24, Z+2	; 0x02
    19f4:	93 81       	ldd	r25, Z+3	; 0x03
    19f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fa:	dc 01       	movw	r26, r24
    19fc:	cb 01       	movw	r24, r22
    19fe:	f8 01       	movw	r30, r16
    1a00:	91 83       	std	Z+1, r25	; 0x01
    1a02:	80 83       	st	Z, r24
    1a04:	de 01       	movw	r26, r28
    1a06:	a9 5b       	subi	r26, 0xB9	; 185
    1a08:	bf 4f       	sbci	r27, 0xFF	; 255
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	e5 5b       	subi	r30, 0xB5	; 181
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	80 81       	ld	r24, Z
    1a12:	91 81       	ldd	r25, Z+1	; 0x01
    1a14:	8d 93       	st	X+, r24
    1a16:	9c 93       	st	X, r25
    1a18:	fe 01       	movw	r30, r28
    1a1a:	e9 5b       	subi	r30, 0xB9	; 185
    1a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a1e:	80 81       	ld	r24, Z
    1a20:	91 81       	ldd	r25, Z+1	; 0x01
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <LCD_displayCharacter+0x30a>
    1a26:	fe 01       	movw	r30, r28
    1a28:	e9 5b       	subi	r30, 0xB9	; 185
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	91 83       	std	Z+1, r25	; 0x01
    1a2e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
#if (DATA_BITS_MODE == 4)
	/* out the highest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (data & 0xF0);
    1a30:	a5 e3       	ldi	r26, 0x35	; 53
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e5 e3       	ldi	r30, 0x35	; 53
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	98 2f       	mov	r25, r24
    1a3c:	9f 70       	andi	r25, 0x0F	; 15
    1a3e:	fe 01       	movw	r30, r28
    1a40:	ed 59       	subi	r30, 0x9D	; 157
    1a42:	ff 4f       	sbci	r31, 0xFF	; 255
    1a44:	80 81       	ld	r24, Z
    1a46:	80 7f       	andi	r24, 0xF0	; 240
    1a48:	89 2b       	or	r24, r25
    1a4a:	8c 93       	st	X, r24
    1a4c:	fe 01       	movw	r30, r28
    1a4e:	ed 5b       	subi	r30, 0xBD	; 189
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	80 e0       	ldi	r24, 0x00	; 0
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	a0 e8       	ldi	r26, 0x80	; 128
    1a58:	bf e3       	ldi	r27, 0x3F	; 63
    1a5a:	80 83       	st	Z, r24
    1a5c:	91 83       	std	Z+1, r25	; 0x01
    1a5e:	a2 83       	std	Z+2, r26	; 0x02
    1a60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a62:	8e 01       	movw	r16, r28
    1a64:	01 5c       	subi	r16, 0xC1	; 193
    1a66:	1f 4f       	sbci	r17, 0xFF	; 255
    1a68:	fe 01       	movw	r30, r28
    1a6a:	ed 5b       	subi	r30, 0xBD	; 189
    1a6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6e:	60 81       	ld	r22, Z
    1a70:	71 81       	ldd	r23, Z+1	; 0x01
    1a72:	82 81       	ldd	r24, Z+2	; 0x02
    1a74:	93 81       	ldd	r25, Z+3	; 0x03
    1a76:	20 e0       	ldi	r18, 0x00	; 0
    1a78:	30 e0       	ldi	r19, 0x00	; 0
    1a7a:	4a e7       	ldi	r20, 0x7A	; 122
    1a7c:	53 e4       	ldi	r21, 0x43	; 67
    1a7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a82:	dc 01       	movw	r26, r24
    1a84:	cb 01       	movw	r24, r22
    1a86:	f8 01       	movw	r30, r16
    1a88:	80 83       	st	Z, r24
    1a8a:	91 83       	std	Z+1, r25	; 0x01
    1a8c:	a2 83       	std	Z+2, r26	; 0x02
    1a8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a90:	fe 01       	movw	r30, r28
    1a92:	ff 96       	adiw	r30, 0x3f	; 63
    1a94:	60 81       	ld	r22, Z
    1a96:	71 81       	ldd	r23, Z+1	; 0x01
    1a98:	82 81       	ldd	r24, Z+2	; 0x02
    1a9a:	93 81       	ldd	r25, Z+3	; 0x03
    1a9c:	20 e0       	ldi	r18, 0x00	; 0
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	40 e8       	ldi	r20, 0x80	; 128
    1aa2:	5f e3       	ldi	r21, 0x3F	; 63
    1aa4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa8:	88 23       	and	r24, r24
    1aaa:	2c f4       	brge	.+10     	; 0x1ab6 <LCD_displayCharacter+0x39e>
		__ticks = 1;
    1aac:	81 e0       	ldi	r24, 0x01	; 1
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	9e af       	std	Y+62, r25	; 0x3e
    1ab2:	8d af       	std	Y+61, r24	; 0x3d
    1ab4:	46 c0       	rjmp	.+140    	; 0x1b42 <LCD_displayCharacter+0x42a>
	else if (__tmp > 65535)
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	ff 96       	adiw	r30, 0x3f	; 63
    1aba:	60 81       	ld	r22, Z
    1abc:	71 81       	ldd	r23, Z+1	; 0x01
    1abe:	82 81       	ldd	r24, Z+2	; 0x02
    1ac0:	93 81       	ldd	r25, Z+3	; 0x03
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	3f ef       	ldi	r19, 0xFF	; 255
    1ac6:	4f e7       	ldi	r20, 0x7F	; 127
    1ac8:	57 e4       	ldi	r21, 0x47	; 71
    1aca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ace:	18 16       	cp	r1, r24
    1ad0:	64 f5       	brge	.+88     	; 0x1b2a <LCD_displayCharacter+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad2:	fe 01       	movw	r30, r28
    1ad4:	ed 5b       	subi	r30, 0xBD	; 189
    1ad6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ad8:	60 81       	ld	r22, Z
    1ada:	71 81       	ldd	r23, Z+1	; 0x01
    1adc:	82 81       	ldd	r24, Z+2	; 0x02
    1ade:	93 81       	ldd	r25, Z+3	; 0x03
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	40 e2       	ldi	r20, 0x20	; 32
    1ae6:	51 e4       	ldi	r21, 0x41	; 65
    1ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aec:	dc 01       	movw	r26, r24
    1aee:	cb 01       	movw	r24, r22
    1af0:	bc 01       	movw	r22, r24
    1af2:	cd 01       	movw	r24, r26
    1af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af8:	dc 01       	movw	r26, r24
    1afa:	cb 01       	movw	r24, r22
    1afc:	9e af       	std	Y+62, r25	; 0x3e
    1afe:	8d af       	std	Y+61, r24	; 0x3d
    1b00:	0f c0       	rjmp	.+30     	; 0x1b20 <LCD_displayCharacter+0x408>
    1b02:	89 e1       	ldi	r24, 0x19	; 25
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	9c af       	std	Y+60, r25	; 0x3c
    1b08:	8b af       	std	Y+59, r24	; 0x3b
    1b0a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b0c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b0e:	01 97       	sbiw	r24, 0x01	; 1
    1b10:	f1 f7       	brne	.-4      	; 0x1b0e <LCD_displayCharacter+0x3f6>
    1b12:	9c af       	std	Y+60, r25	; 0x3c
    1b14:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b16:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b18:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b1a:	01 97       	sbiw	r24, 0x01	; 1
    1b1c:	9e af       	std	Y+62, r25	; 0x3e
    1b1e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b20:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b22:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b24:	00 97       	sbiw	r24, 0x00	; 0
    1b26:	69 f7       	brne	.-38     	; 0x1b02 <LCD_displayCharacter+0x3ea>
    1b28:	16 c0       	rjmp	.+44     	; 0x1b56 <LCD_displayCharacter+0x43e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b2a:	fe 01       	movw	r30, r28
    1b2c:	ff 96       	adiw	r30, 0x3f	; 63
    1b2e:	60 81       	ld	r22, Z
    1b30:	71 81       	ldd	r23, Z+1	; 0x01
    1b32:	82 81       	ldd	r24, Z+2	; 0x02
    1b34:	93 81       	ldd	r25, Z+3	; 0x03
    1b36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3a:	dc 01       	movw	r26, r24
    1b3c:	cb 01       	movw	r24, r22
    1b3e:	9e af       	std	Y+62, r25	; 0x3e
    1b40:	8d af       	std	Y+61, r24	; 0x3d
    1b42:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b44:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b46:	9a af       	std	Y+58, r25	; 0x3a
    1b48:	89 af       	std	Y+57, r24	; 0x39
    1b4a:	89 ad       	ldd	r24, Y+57	; 0x39
    1b4c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b4e:	01 97       	sbiw	r24, 0x01	; 1
    1b50:	f1 f7       	brne	.-4      	; 0x1b4e <LCD_displayCharacter+0x436>
    1b52:	9a af       	std	Y+58, r25	; 0x3a
    1b54:	89 af       	std	Y+57, r24	; 0x39
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | ((data & 0xF0) >> 4);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1b56:	a2 e3       	ldi	r26, 0x32	; 50
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	e2 e3       	ldi	r30, 0x32	; 50
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	8f 7b       	andi	r24, 0xBF	; 191
    1b62:	8c 93       	st	X, r24
    1b64:	80 e0       	ldi	r24, 0x00	; 0
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	a0 e8       	ldi	r26, 0x80	; 128
    1b6a:	bf e3       	ldi	r27, 0x3F	; 63
    1b6c:	8d ab       	std	Y+53, r24	; 0x35
    1b6e:	9e ab       	std	Y+54, r25	; 0x36
    1b70:	af ab       	std	Y+55, r26	; 0x37
    1b72:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b74:	6d a9       	ldd	r22, Y+53	; 0x35
    1b76:	7e a9       	ldd	r23, Y+54	; 0x36
    1b78:	8f a9       	ldd	r24, Y+55	; 0x37
    1b7a:	98 ad       	ldd	r25, Y+56	; 0x38
    1b7c:	20 e0       	ldi	r18, 0x00	; 0
    1b7e:	30 e0       	ldi	r19, 0x00	; 0
    1b80:	4a e7       	ldi	r20, 0x7A	; 122
    1b82:	53 e4       	ldi	r21, 0x43	; 67
    1b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b88:	dc 01       	movw	r26, r24
    1b8a:	cb 01       	movw	r24, r22
    1b8c:	89 ab       	std	Y+49, r24	; 0x31
    1b8e:	9a ab       	std	Y+50, r25	; 0x32
    1b90:	ab ab       	std	Y+51, r26	; 0x33
    1b92:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b94:	69 a9       	ldd	r22, Y+49	; 0x31
    1b96:	7a a9       	ldd	r23, Y+50	; 0x32
    1b98:	8b a9       	ldd	r24, Y+51	; 0x33
    1b9a:	9c a9       	ldd	r25, Y+52	; 0x34
    1b9c:	20 e0       	ldi	r18, 0x00	; 0
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	40 e8       	ldi	r20, 0x80	; 128
    1ba2:	5f e3       	ldi	r21, 0x3F	; 63
    1ba4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ba8:	88 23       	and	r24, r24
    1baa:	2c f4       	brge	.+10     	; 0x1bb6 <LCD_displayCharacter+0x49e>
		__ticks = 1;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	98 ab       	std	Y+48, r25	; 0x30
    1bb2:	8f a7       	std	Y+47, r24	; 0x2f
    1bb4:	3f c0       	rjmp	.+126    	; 0x1c34 <LCD_displayCharacter+0x51c>
	else if (__tmp > 65535)
    1bb6:	69 a9       	ldd	r22, Y+49	; 0x31
    1bb8:	7a a9       	ldd	r23, Y+50	; 0x32
    1bba:	8b a9       	ldd	r24, Y+51	; 0x33
    1bbc:	9c a9       	ldd	r25, Y+52	; 0x34
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	3f ef       	ldi	r19, 0xFF	; 255
    1bc2:	4f e7       	ldi	r20, 0x7F	; 127
    1bc4:	57 e4       	ldi	r21, 0x47	; 71
    1bc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bca:	18 16       	cp	r1, r24
    1bcc:	4c f5       	brge	.+82     	; 0x1c20 <LCD_displayCharacter+0x508>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bce:	6d a9       	ldd	r22, Y+53	; 0x35
    1bd0:	7e a9       	ldd	r23, Y+54	; 0x36
    1bd2:	8f a9       	ldd	r24, Y+55	; 0x37
    1bd4:	98 ad       	ldd	r25, Y+56	; 0x38
    1bd6:	20 e0       	ldi	r18, 0x00	; 0
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	40 e2       	ldi	r20, 0x20	; 32
    1bdc:	51 e4       	ldi	r21, 0x41	; 65
    1bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1be2:	dc 01       	movw	r26, r24
    1be4:	cb 01       	movw	r24, r22
    1be6:	bc 01       	movw	r22, r24
    1be8:	cd 01       	movw	r24, r26
    1bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bee:	dc 01       	movw	r26, r24
    1bf0:	cb 01       	movw	r24, r22
    1bf2:	98 ab       	std	Y+48, r25	; 0x30
    1bf4:	8f a7       	std	Y+47, r24	; 0x2f
    1bf6:	0f c0       	rjmp	.+30     	; 0x1c16 <LCD_displayCharacter+0x4fe>
    1bf8:	89 e1       	ldi	r24, 0x19	; 25
    1bfa:	90 e0       	ldi	r25, 0x00	; 0
    1bfc:	9e a7       	std	Y+46, r25	; 0x2e
    1bfe:	8d a7       	std	Y+45, r24	; 0x2d
    1c00:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c02:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c04:	01 97       	sbiw	r24, 0x01	; 1
    1c06:	f1 f7       	brne	.-4      	; 0x1c04 <LCD_displayCharacter+0x4ec>
    1c08:	9e a7       	std	Y+46, r25	; 0x2e
    1c0a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c0e:	98 a9       	ldd	r25, Y+48	; 0x30
    1c10:	01 97       	sbiw	r24, 0x01	; 1
    1c12:	98 ab       	std	Y+48, r25	; 0x30
    1c14:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c16:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c18:	98 a9       	ldd	r25, Y+48	; 0x30
    1c1a:	00 97       	sbiw	r24, 0x00	; 0
    1c1c:	69 f7       	brne	.-38     	; 0x1bf8 <LCD_displayCharacter+0x4e0>
    1c1e:	14 c0       	rjmp	.+40     	; 0x1c48 <LCD_displayCharacter+0x530>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c20:	69 a9       	ldd	r22, Y+49	; 0x31
    1c22:	7a a9       	ldd	r23, Y+50	; 0x32
    1c24:	8b a9       	ldd	r24, Y+51	; 0x33
    1c26:	9c a9       	ldd	r25, Y+52	; 0x34
    1c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c2c:	dc 01       	movw	r26, r24
    1c2e:	cb 01       	movw	r24, r22
    1c30:	98 ab       	std	Y+48, r25	; 0x30
    1c32:	8f a7       	std	Y+47, r24	; 0x2f
    1c34:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c36:	98 a9       	ldd	r25, Y+48	; 0x30
    1c38:	9c a7       	std	Y+44, r25	; 0x2c
    1c3a:	8b a7       	std	Y+43, r24	; 0x2b
    1c3c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c3e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c40:	01 97       	sbiw	r24, 0x01	; 1
    1c42:	f1 f7       	brne	.-4      	; 0x1c40 <LCD_displayCharacter+0x528>
    1c44:	9c a7       	std	Y+44, r25	; 0x2c
    1c46:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1c48:	a2 e3       	ldi	r26, 0x32	; 50
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	e2 e3       	ldi	r30, 0x32	; 50
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	80 64       	ori	r24, 0x40	; 64
    1c54:	8c 93       	st	X, r24
    1c56:	80 e0       	ldi	r24, 0x00	; 0
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	a0 e8       	ldi	r26, 0x80	; 128
    1c5c:	bf e3       	ldi	r27, 0x3F	; 63
    1c5e:	8f a3       	std	Y+39, r24	; 0x27
    1c60:	98 a7       	std	Y+40, r25	; 0x28
    1c62:	a9 a7       	std	Y+41, r26	; 0x29
    1c64:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c66:	6f a1       	ldd	r22, Y+39	; 0x27
    1c68:	78 a5       	ldd	r23, Y+40	; 0x28
    1c6a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	4a e7       	ldi	r20, 0x7A	; 122
    1c74:	53 e4       	ldi	r21, 0x43	; 67
    1c76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c7a:	dc 01       	movw	r26, r24
    1c7c:	cb 01       	movw	r24, r22
    1c7e:	8b a3       	std	Y+35, r24	; 0x23
    1c80:	9c a3       	std	Y+36, r25	; 0x24
    1c82:	ad a3       	std	Y+37, r26	; 0x25
    1c84:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c86:	6b a1       	ldd	r22, Y+35	; 0x23
    1c88:	7c a1       	ldd	r23, Y+36	; 0x24
    1c8a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c8c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e8       	ldi	r20, 0x80	; 128
    1c94:	5f e3       	ldi	r21, 0x3F	; 63
    1c96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c9a:	88 23       	and	r24, r24
    1c9c:	2c f4       	brge	.+10     	; 0x1ca8 <LCD_displayCharacter+0x590>
		__ticks = 1;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	9a a3       	std	Y+34, r25	; 0x22
    1ca4:	89 a3       	std	Y+33, r24	; 0x21
    1ca6:	3f c0       	rjmp	.+126    	; 0x1d26 <LCD_displayCharacter+0x60e>
	else if (__tmp > 65535)
    1ca8:	6b a1       	ldd	r22, Y+35	; 0x23
    1caa:	7c a1       	ldd	r23, Y+36	; 0x24
    1cac:	8d a1       	ldd	r24, Y+37	; 0x25
    1cae:	9e a1       	ldd	r25, Y+38	; 0x26
    1cb0:	20 e0       	ldi	r18, 0x00	; 0
    1cb2:	3f ef       	ldi	r19, 0xFF	; 255
    1cb4:	4f e7       	ldi	r20, 0x7F	; 127
    1cb6:	57 e4       	ldi	r21, 0x47	; 71
    1cb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cbc:	18 16       	cp	r1, r24
    1cbe:	4c f5       	brge	.+82     	; 0x1d12 <LCD_displayCharacter+0x5fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc0:	6f a1       	ldd	r22, Y+39	; 0x27
    1cc2:	78 a5       	ldd	r23, Y+40	; 0x28
    1cc4:	89 a5       	ldd	r24, Y+41	; 0x29
    1cc6:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cc8:	20 e0       	ldi	r18, 0x00	; 0
    1cca:	30 e0       	ldi	r19, 0x00	; 0
    1ccc:	40 e2       	ldi	r20, 0x20	; 32
    1cce:	51 e4       	ldi	r21, 0x41	; 65
    1cd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cd4:	dc 01       	movw	r26, r24
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	bc 01       	movw	r22, r24
    1cda:	cd 01       	movw	r24, r26
    1cdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce0:	dc 01       	movw	r26, r24
    1ce2:	cb 01       	movw	r24, r22
    1ce4:	9a a3       	std	Y+34, r25	; 0x22
    1ce6:	89 a3       	std	Y+33, r24	; 0x21
    1ce8:	0f c0       	rjmp	.+30     	; 0x1d08 <LCD_displayCharacter+0x5f0>
    1cea:	89 e1       	ldi	r24, 0x19	; 25
    1cec:	90 e0       	ldi	r25, 0x00	; 0
    1cee:	98 a3       	std	Y+32, r25	; 0x20
    1cf0:	8f 8f       	std	Y+31, r24	; 0x1f
    1cf2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1cf4:	98 a1       	ldd	r25, Y+32	; 0x20
    1cf6:	01 97       	sbiw	r24, 0x01	; 1
    1cf8:	f1 f7       	brne	.-4      	; 0x1cf6 <LCD_displayCharacter+0x5de>
    1cfa:	98 a3       	std	Y+32, r25	; 0x20
    1cfc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cfe:	89 a1       	ldd	r24, Y+33	; 0x21
    1d00:	9a a1       	ldd	r25, Y+34	; 0x22
    1d02:	01 97       	sbiw	r24, 0x01	; 1
    1d04:	9a a3       	std	Y+34, r25	; 0x22
    1d06:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d08:	89 a1       	ldd	r24, Y+33	; 0x21
    1d0a:	9a a1       	ldd	r25, Y+34	; 0x22
    1d0c:	00 97       	sbiw	r24, 0x00	; 0
    1d0e:	69 f7       	brne	.-38     	; 0x1cea <LCD_displayCharacter+0x5d2>
    1d10:	14 c0       	rjmp	.+40     	; 0x1d3a <LCD_displayCharacter+0x622>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d12:	6b a1       	ldd	r22, Y+35	; 0x23
    1d14:	7c a1       	ldd	r23, Y+36	; 0x24
    1d16:	8d a1       	ldd	r24, Y+37	; 0x25
    1d18:	9e a1       	ldd	r25, Y+38	; 0x26
    1d1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d1e:	dc 01       	movw	r26, r24
    1d20:	cb 01       	movw	r24, r22
    1d22:	9a a3       	std	Y+34, r25	; 0x22
    1d24:	89 a3       	std	Y+33, r24	; 0x21
    1d26:	89 a1       	ldd	r24, Y+33	; 0x21
    1d28:	9a a1       	ldd	r25, Y+34	; 0x22
    1d2a:	9e 8f       	std	Y+30, r25	; 0x1e
    1d2c:	8d 8f       	std	Y+29, r24	; 0x1d
    1d2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d30:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d32:	01 97       	sbiw	r24, 0x01	; 1
    1d34:	f1 f7       	brne	.-4      	; 0x1d32 <LCD_displayCharacter+0x61a>
    1d36:	9e 8f       	std	Y+30, r25	; 0x1e
    1d38:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	/* out the lowest 4 bits of the required data to the data bus D4 --> D7 */
#ifdef UPPER_PORT_PINS
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((data & 0x0F) << 4);
    1d3a:	a5 e3       	ldi	r26, 0x35	; 53
    1d3c:	b0 e0       	ldi	r27, 0x00	; 0
    1d3e:	e5 e3       	ldi	r30, 0x35	; 53
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	28 2f       	mov	r18, r24
    1d46:	2f 70       	andi	r18, 0x0F	; 15
    1d48:	fe 01       	movw	r30, r28
    1d4a:	ed 59       	subi	r30, 0x9D	; 157
    1d4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4e:	80 81       	ld	r24, Z
    1d50:	88 2f       	mov	r24, r24
    1d52:	90 e0       	ldi	r25, 0x00	; 0
    1d54:	82 95       	swap	r24
    1d56:	92 95       	swap	r25
    1d58:	90 7f       	andi	r25, 0xF0	; 240
    1d5a:	98 27       	eor	r25, r24
    1d5c:	80 7f       	andi	r24, 0xF0	; 240
    1d5e:	98 27       	eor	r25, r24
    1d60:	82 2b       	or	r24, r18
    1d62:	8c 93       	st	X, r24
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	a0 e8       	ldi	r26, 0x80	; 128
    1d6a:	bf e3       	ldi	r27, 0x3F	; 63
    1d6c:	89 8f       	std	Y+25, r24	; 0x19
    1d6e:	9a 8f       	std	Y+26, r25	; 0x1a
    1d70:	ab 8f       	std	Y+27, r26	; 0x1b
    1d72:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d74:	69 8d       	ldd	r22, Y+25	; 0x19
    1d76:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d78:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d7a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d7c:	20 e0       	ldi	r18, 0x00	; 0
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	4a e7       	ldi	r20, 0x7A	; 122
    1d82:	53 e4       	ldi	r21, 0x43	; 67
    1d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d88:	dc 01       	movw	r26, r24
    1d8a:	cb 01       	movw	r24, r22
    1d8c:	8d 8b       	std	Y+21, r24	; 0x15
    1d8e:	9e 8b       	std	Y+22, r25	; 0x16
    1d90:	af 8b       	std	Y+23, r26	; 0x17
    1d92:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d94:	6d 89       	ldd	r22, Y+21	; 0x15
    1d96:	7e 89       	ldd	r23, Y+22	; 0x16
    1d98:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	40 e8       	ldi	r20, 0x80	; 128
    1da2:	5f e3       	ldi	r21, 0x3F	; 63
    1da4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da8:	88 23       	and	r24, r24
    1daa:	2c f4       	brge	.+10     	; 0x1db6 <LCD_displayCharacter+0x69e>
		__ticks = 1;
    1dac:	81 e0       	ldi	r24, 0x01	; 1
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	9c 8b       	std	Y+20, r25	; 0x14
    1db2:	8b 8b       	std	Y+19, r24	; 0x13
    1db4:	3f c0       	rjmp	.+126    	; 0x1e34 <LCD_displayCharacter+0x71c>
	else if (__tmp > 65535)
    1db6:	6d 89       	ldd	r22, Y+21	; 0x15
    1db8:	7e 89       	ldd	r23, Y+22	; 0x16
    1dba:	8f 89       	ldd	r24, Y+23	; 0x17
    1dbc:	98 8d       	ldd	r25, Y+24	; 0x18
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	3f ef       	ldi	r19, 0xFF	; 255
    1dc2:	4f e7       	ldi	r20, 0x7F	; 127
    1dc4:	57 e4       	ldi	r21, 0x47	; 71
    1dc6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dca:	18 16       	cp	r1, r24
    1dcc:	4c f5       	brge	.+82     	; 0x1e20 <LCD_displayCharacter+0x708>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dce:	69 8d       	ldd	r22, Y+25	; 0x19
    1dd0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1dd2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1dd4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e2       	ldi	r20, 0x20	; 32
    1ddc:	51 e4       	ldi	r21, 0x41	; 65
    1dde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	bc 01       	movw	r22, r24
    1de8:	cd 01       	movw	r24, r26
    1dea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dee:	dc 01       	movw	r26, r24
    1df0:	cb 01       	movw	r24, r22
    1df2:	9c 8b       	std	Y+20, r25	; 0x14
    1df4:	8b 8b       	std	Y+19, r24	; 0x13
    1df6:	0f c0       	rjmp	.+30     	; 0x1e16 <LCD_displayCharacter+0x6fe>
    1df8:	89 e1       	ldi	r24, 0x19	; 25
    1dfa:	90 e0       	ldi	r25, 0x00	; 0
    1dfc:	9a 8b       	std	Y+18, r25	; 0x12
    1dfe:	89 8b       	std	Y+17, r24	; 0x11
    1e00:	89 89       	ldd	r24, Y+17	; 0x11
    1e02:	9a 89       	ldd	r25, Y+18	; 0x12
    1e04:	01 97       	sbiw	r24, 0x01	; 1
    1e06:	f1 f7       	brne	.-4      	; 0x1e04 <LCD_displayCharacter+0x6ec>
    1e08:	9a 8b       	std	Y+18, r25	; 0x12
    1e0a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e0e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	9c 8b       	std	Y+20, r25	; 0x14
    1e14:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e16:	8b 89       	ldd	r24, Y+19	; 0x13
    1e18:	9c 89       	ldd	r25, Y+20	; 0x14
    1e1a:	00 97       	sbiw	r24, 0x00	; 0
    1e1c:	69 f7       	brne	.-38     	; 0x1df8 <LCD_displayCharacter+0x6e0>
    1e1e:	14 c0       	rjmp	.+40     	; 0x1e48 <LCD_displayCharacter+0x730>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e20:	6d 89       	ldd	r22, Y+21	; 0x15
    1e22:	7e 89       	ldd	r23, Y+22	; 0x16
    1e24:	8f 89       	ldd	r24, Y+23	; 0x17
    1e26:	98 8d       	ldd	r25, Y+24	; 0x18
    1e28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	9c 8b       	std	Y+20, r25	; 0x14
    1e32:	8b 8b       	std	Y+19, r24	; 0x13
    1e34:	8b 89       	ldd	r24, Y+19	; 0x13
    1e36:	9c 89       	ldd	r25, Y+20	; 0x14
    1e38:	98 8b       	std	Y+16, r25	; 0x10
    1e3a:	8f 87       	std	Y+15, r24	; 0x0f
    1e3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e3e:	98 89       	ldd	r25, Y+16	; 0x10
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	f1 f7       	brne	.-4      	; 0x1e40 <LCD_displayCharacter+0x728>
    1e44:	98 8b       	std	Y+16, r25	; 0x10
    1e46:	8f 87       	std	Y+15, r24	; 0x0f
#else
	LCD_DATA_PORT = (LCD_DATA_PORT & 0xF0) | (data & 0x0F);
#endif

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1e48:	a2 e3       	ldi	r26, 0x32	; 50
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	e2 e3       	ldi	r30, 0x32	; 50
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	8f 7b       	andi	r24, 0xBF	; 191
    1e54:	8c 93       	st	X, r24
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
    1e5a:	a0 e8       	ldi	r26, 0x80	; 128
    1e5c:	bf e3       	ldi	r27, 0x3F	; 63
    1e5e:	8b 87       	std	Y+11, r24	; 0x0b
    1e60:	9c 87       	std	Y+12, r25	; 0x0c
    1e62:	ad 87       	std	Y+13, r26	; 0x0d
    1e64:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e66:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e68:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e6a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e6c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e6e:	20 e0       	ldi	r18, 0x00	; 0
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	4a e7       	ldi	r20, 0x7A	; 122
    1e74:	53 e4       	ldi	r21, 0x43	; 67
    1e76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e7a:	dc 01       	movw	r26, r24
    1e7c:	cb 01       	movw	r24, r22
    1e7e:	8f 83       	std	Y+7, r24	; 0x07
    1e80:	98 87       	std	Y+8, r25	; 0x08
    1e82:	a9 87       	std	Y+9, r26	; 0x09
    1e84:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e86:	6f 81       	ldd	r22, Y+7	; 0x07
    1e88:	78 85       	ldd	r23, Y+8	; 0x08
    1e8a:	89 85       	ldd	r24, Y+9	; 0x09
    1e8c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	40 e8       	ldi	r20, 0x80	; 128
    1e94:	5f e3       	ldi	r21, 0x3F	; 63
    1e96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e9a:	88 23       	and	r24, r24
    1e9c:	2c f4       	brge	.+10     	; 0x1ea8 <LCD_displayCharacter+0x790>
		__ticks = 1;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	90 e0       	ldi	r25, 0x00	; 0
    1ea2:	9e 83       	std	Y+6, r25	; 0x06
    1ea4:	8d 83       	std	Y+5, r24	; 0x05
    1ea6:	3f c0       	rjmp	.+126    	; 0x1f26 <LCD_displayCharacter+0x80e>
	else if (__tmp > 65535)
    1ea8:	6f 81       	ldd	r22, Y+7	; 0x07
    1eaa:	78 85       	ldd	r23, Y+8	; 0x08
    1eac:	89 85       	ldd	r24, Y+9	; 0x09
    1eae:	9a 85       	ldd	r25, Y+10	; 0x0a
    1eb0:	20 e0       	ldi	r18, 0x00	; 0
    1eb2:	3f ef       	ldi	r19, 0xFF	; 255
    1eb4:	4f e7       	ldi	r20, 0x7F	; 127
    1eb6:	57 e4       	ldi	r21, 0x47	; 71
    1eb8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ebc:	18 16       	cp	r1, r24
    1ebe:	4c f5       	brge	.+82     	; 0x1f12 <LCD_displayCharacter+0x7fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ec0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ec2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ec4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ec6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	40 e2       	ldi	r20, 0x20	; 32
    1ece:	51 e4       	ldi	r21, 0x41	; 65
    1ed0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	bc 01       	movw	r22, r24
    1eda:	cd 01       	movw	r24, r26
    1edc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee0:	dc 01       	movw	r26, r24
    1ee2:	cb 01       	movw	r24, r22
    1ee4:	9e 83       	std	Y+6, r25	; 0x06
    1ee6:	8d 83       	std	Y+5, r24	; 0x05
    1ee8:	0f c0       	rjmp	.+30     	; 0x1f08 <LCD_displayCharacter+0x7f0>
    1eea:	89 e1       	ldi	r24, 0x19	; 25
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	9c 83       	std	Y+4, r25	; 0x04
    1ef0:	8b 83       	std	Y+3, r24	; 0x03
    1ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef6:	01 97       	sbiw	r24, 0x01	; 1
    1ef8:	f1 f7       	brne	.-4      	; 0x1ef6 <LCD_displayCharacter+0x7de>
    1efa:	9c 83       	std	Y+4, r25	; 0x04
    1efc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efe:	8d 81       	ldd	r24, Y+5	; 0x05
    1f00:	9e 81       	ldd	r25, Y+6	; 0x06
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	9e 83       	std	Y+6, r25	; 0x06
    1f06:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f08:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1f0c:	00 97       	sbiw	r24, 0x00	; 0
    1f0e:	69 f7       	brne	.-38     	; 0x1eea <LCD_displayCharacter+0x7d2>
    1f10:	14 c0       	rjmp	.+40     	; 0x1f3a <LCD_displayCharacter+0x822>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f12:	6f 81       	ldd	r22, Y+7	; 0x07
    1f14:	78 85       	ldd	r23, Y+8	; 0x08
    1f16:	89 85       	ldd	r24, Y+9	; 0x09
    1f18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1e:	dc 01       	movw	r26, r24
    1f20:	cb 01       	movw	r24, r22
    1f22:	9e 83       	std	Y+6, r25	; 0x06
    1f24:	8d 83       	std	Y+5, r24	; 0x05
    1f26:	8d 81       	ldd	r24, Y+5	; 0x05
    1f28:	9e 81       	ldd	r25, Y+6	; 0x06
    1f2a:	9a 83       	std	Y+2, r25	; 0x02
    1f2c:	89 83       	std	Y+1, r24	; 0x01
    1f2e:	89 81       	ldd	r24, Y+1	; 0x01
    1f30:	9a 81       	ldd	r25, Y+2	; 0x02
    1f32:	01 97       	sbiw	r24, 0x01	; 1
    1f34:	f1 f7       	brne	.-4      	; 0x1f32 <LCD_displayCharacter+0x81a>
    1f36:	9a 83       	std	Y+2, r25	; 0x02
    1f38:	89 83       	std	Y+1, r24	; 0x01
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1f3a:	cd 59       	subi	r28, 0x9D	; 157
    1f3c:	df 4f       	sbci	r29, 0xFF	; 255
    1f3e:	0f b6       	in	r0, 0x3f	; 63
    1f40:	f8 94       	cli
    1f42:	de bf       	out	0x3e, r29	; 62
    1f44:	0f be       	out	0x3f, r0	; 63
    1f46:	cd bf       	out	0x3d, r28	; 61
    1f48:	cf 91       	pop	r28
    1f4a:	df 91       	pop	r29
    1f4c:	1f 91       	pop	r17
    1f4e:	0f 91       	pop	r16
    1f50:	08 95       	ret

00001f52 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    1f52:	df 93       	push	r29
    1f54:	cf 93       	push	r28
    1f56:	00 d0       	rcall	.+0      	; 0x1f58 <LCD_displayString+0x6>
    1f58:	0f 92       	push	r0
    1f5a:	cd b7       	in	r28, 0x3d	; 61
    1f5c:	de b7       	in	r29, 0x3e	; 62
    1f5e:	9b 83       	std	Y+3, r25	; 0x03
    1f60:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f62:	19 82       	std	Y+1, r1	; 0x01
    1f64:	0e c0       	rjmp	.+28     	; 0x1f82 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    1f66:	89 81       	ldd	r24, Y+1	; 0x01
    1f68:	28 2f       	mov	r18, r24
    1f6a:	30 e0       	ldi	r19, 0x00	; 0
    1f6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f6e:	9b 81       	ldd	r25, Y+3	; 0x03
    1f70:	fc 01       	movw	r30, r24
    1f72:	e2 0f       	add	r30, r18
    1f74:	f3 1f       	adc	r31, r19
    1f76:	80 81       	ld	r24, Z
    1f78:	0e 94 8c 0b 	call	0x1718	; 0x1718 <LCD_displayCharacter>
		i++;
    1f7c:	89 81       	ldd	r24, Y+1	; 0x01
    1f7e:	8f 5f       	subi	r24, 0xFF	; 255
    1f80:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    1f82:	89 81       	ldd	r24, Y+1	; 0x01
    1f84:	28 2f       	mov	r18, r24
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	8a 81       	ldd	r24, Y+2	; 0x02
    1f8a:	9b 81       	ldd	r25, Y+3	; 0x03
    1f8c:	fc 01       	movw	r30, r24
    1f8e:	e2 0f       	add	r30, r18
    1f90:	f3 1f       	adc	r31, r19
    1f92:	80 81       	ld	r24, Z
    1f94:	88 23       	and	r24, r24
    1f96:	39 f7       	brne	.-50     	; 0x1f66 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    1f98:	0f 90       	pop	r0
    1f9a:	0f 90       	pop	r0
    1f9c:	0f 90       	pop	r0
    1f9e:	cf 91       	pop	r28
    1fa0:	df 91       	pop	r29
    1fa2:	08 95       	ret

00001fa4 <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    1fa4:	df 93       	push	r29
    1fa6:	cf 93       	push	r28
    1fa8:	00 d0       	rcall	.+0      	; 0x1faa <LCD_goToRowColumn+0x6>
    1faa:	00 d0       	rcall	.+0      	; 0x1fac <LCD_goToRowColumn+0x8>
    1fac:	0f 92       	push	r0
    1fae:	cd b7       	in	r28, 0x3d	; 61
    1fb0:	de b7       	in	r29, 0x3e	; 62
    1fb2:	8a 83       	std	Y+2, r24	; 0x02
    1fb4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;

	/* first of all calculate the required address */
	switch(row)
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	3d 83       	std	Y+5, r19	; 0x05
    1fbe:	2c 83       	std	Y+4, r18	; 0x04
    1fc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1fc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1fc4:	81 30       	cpi	r24, 0x01	; 1
    1fc6:	91 05       	cpc	r25, r1
    1fc8:	c1 f0       	breq	.+48     	; 0x1ffa <LCD_goToRowColumn+0x56>
    1fca:	2c 81       	ldd	r18, Y+4	; 0x04
    1fcc:	3d 81       	ldd	r19, Y+5	; 0x05
    1fce:	22 30       	cpi	r18, 0x02	; 2
    1fd0:	31 05       	cpc	r19, r1
    1fd2:	2c f4       	brge	.+10     	; 0x1fde <LCD_goToRowColumn+0x3a>
    1fd4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fd6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fd8:	00 97       	sbiw	r24, 0x00	; 0
    1fda:	61 f0       	breq	.+24     	; 0x1ff4 <LCD_goToRowColumn+0x50>
    1fdc:	19 c0       	rjmp	.+50     	; 0x2010 <LCD_goToRowColumn+0x6c>
    1fde:	2c 81       	ldd	r18, Y+4	; 0x04
    1fe0:	3d 81       	ldd	r19, Y+5	; 0x05
    1fe2:	22 30       	cpi	r18, 0x02	; 2
    1fe4:	31 05       	cpc	r19, r1
    1fe6:	69 f0       	breq	.+26     	; 0x2002 <LCD_goToRowColumn+0x5e>
    1fe8:	8c 81       	ldd	r24, Y+4	; 0x04
    1fea:	9d 81       	ldd	r25, Y+5	; 0x05
    1fec:	83 30       	cpi	r24, 0x03	; 3
    1fee:	91 05       	cpc	r25, r1
    1ff0:	61 f0       	breq	.+24     	; 0x200a <LCD_goToRowColumn+0x66>
    1ff2:	0e c0       	rjmp	.+28     	; 0x2010 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    1ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff6:	89 83       	std	Y+1, r24	; 0x01
    1ff8:	0b c0       	rjmp	.+22     	; 0x2010 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    1ffa:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffc:	80 5c       	subi	r24, 0xC0	; 192
    1ffe:	89 83       	std	Y+1, r24	; 0x01
    2000:	07 c0       	rjmp	.+14     	; 0x2010 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    2002:	8b 81       	ldd	r24, Y+3	; 0x03
    2004:	80 5f       	subi	r24, 0xF0	; 240
    2006:	89 83       	std	Y+1, r24	; 0x01
    2008:	03 c0       	rjmp	.+6      	; 0x2010 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    200a:	8b 81       	ldd	r24, Y+3	; 0x03
    200c:	80 5b       	subi	r24, 0xB0	; 176
    200e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION);
    2010:	89 81       	ldd	r24, Y+1	; 0x01
    2012:	80 68       	ori	r24, 0x80	; 128
    2014:	0e 94 6f 07 	call	0xede	; 0xede <LCD_sendCommand>
}
    2018:	0f 90       	pop	r0
    201a:	0f 90       	pop	r0
    201c:	0f 90       	pop	r0
    201e:	0f 90       	pop	r0
    2020:	0f 90       	pop	r0
    2022:	cf 91       	pop	r28
    2024:	df 91       	pop	r29
    2026:	08 95       	ret

00002028 <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2028:	df 93       	push	r29
    202a:	cf 93       	push	r28
    202c:	00 d0       	rcall	.+0      	; 0x202e <LCD_displayStringRowColumn+0x6>
    202e:	00 d0       	rcall	.+0      	; 0x2030 <LCD_displayStringRowColumn+0x8>
    2030:	cd b7       	in	r28, 0x3d	; 61
    2032:	de b7       	in	r29, 0x3e	; 62
    2034:	89 83       	std	Y+1, r24	; 0x01
    2036:	6a 83       	std	Y+2, r22	; 0x02
    2038:	5c 83       	std	Y+4, r21	; 0x04
    203a:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    203c:	89 81       	ldd	r24, Y+1	; 0x01
    203e:	6a 81       	ldd	r22, Y+2	; 0x02
    2040:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_displayString>
}
    204c:	0f 90       	pop	r0
    204e:	0f 90       	pop	r0
    2050:	0f 90       	pop	r0
    2052:	0f 90       	pop	r0
    2054:	cf 91       	pop	r28
    2056:	df 91       	pop	r29
    2058:	08 95       	ret

0000205a <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    205a:	df 93       	push	r29
    205c:	cf 93       	push	r28
    205e:	cd b7       	in	r28, 0x3d	; 61
    2060:	de b7       	in	r29, 0x3e	; 62
    2062:	62 97       	sbiw	r28, 0x12	; 18
    2064:	0f b6       	in	r0, 0x3f	; 63
    2066:	f8 94       	cli
    2068:	de bf       	out	0x3e, r29	; 62
    206a:	0f be       	out	0x3f, r0	; 63
    206c:	cd bf       	out	0x3d, r28	; 61
    206e:	9a 8b       	std	Y+18, r25	; 0x12
    2070:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2072:	89 89       	ldd	r24, Y+17	; 0x11
    2074:	9a 89       	ldd	r25, Y+18	; 0x12
    2076:	9e 01       	movw	r18, r28
    2078:	2f 5f       	subi	r18, 0xFF	; 255
    207a:	3f 4f       	sbci	r19, 0xFF	; 255
    207c:	b9 01       	movw	r22, r18
    207e:	4a e0       	ldi	r20, 0x0A	; 10
    2080:	50 e0       	ldi	r21, 0x00	; 0
    2082:	0e 94 18 14 	call	0x2830	; 0x2830 <itoa>
   LCD_displayString(buff);
    2086:	ce 01       	movw	r24, r28
    2088:	01 96       	adiw	r24, 0x01	; 1
    208a:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <LCD_displayString>
}
    208e:	62 96       	adiw	r28, 0x12	; 18
    2090:	0f b6       	in	r0, 0x3f	; 63
    2092:	f8 94       	cli
    2094:	de bf       	out	0x3e, r29	; 62
    2096:	0f be       	out	0x3f, r0	; 63
    2098:	cd bf       	out	0x3d, r28	; 61
    209a:	cf 91       	pop	r28
    209c:	df 91       	pop	r29
    209e:	08 95       	ret

000020a0 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display
    20a8:	81 e0       	ldi	r24, 0x01	; 1
    20aa:	0e 94 6f 07 	call	0xede	; 0xede <LCD_sendCommand>
}
    20ae:	cf 91       	pop	r28
    20b0:	df 91       	pop	r29
    20b2:	08 95       	ret

000020b4 <catch_password>:



/////////////////////////////////////////function to catch pass in an array/////////////////////////////////////

static void catch_password(const uint16 address){
    20b4:	df 93       	push	r29
    20b6:	cf 93       	push	r28
    20b8:	00 d0       	rcall	.+0      	; 0x20ba <catch_password+0x6>
    20ba:	00 d0       	rcall	.+0      	; 0x20bc <catch_password+0x8>
    20bc:	cd b7       	in	r28, 0x3d	; 61
    20be:	de b7       	in	r29, 0x3e	; 62
    20c0:	9c 83       	std	Y+4, r25	; 0x04
    20c2:	8b 83       	std	Y+3, r24	; 0x03
	uint8 i=0;
    20c4:	1a 82       	std	Y+2, r1	; 0x02
	uint8 t;
	do{
	  t =UART_recieveByte();
    20c6:	0e 94 63 13 	call	0x26c6	; 0x26c6 <UART_recieveByte>
    20ca:	89 83       	std	Y+1, r24	; 0x01
		EEPROM_writeByte(address+i,t);
    20cc:	8a 81       	ldd	r24, Y+2	; 0x02
    20ce:	28 2f       	mov	r18, r24
    20d0:	30 e0       	ldi	r19, 0x00	; 0
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	9c 81       	ldd	r25, Y+4	; 0x04
    20d6:	82 0f       	add	r24, r18
    20d8:	93 1f       	adc	r25, r19
    20da:	69 81       	ldd	r22, Y+1	; 0x01
    20dc:	0e 94 30 06 	call	0xc60	; 0xc60 <EEPROM_writeByte>
		i++;
    20e0:	8a 81       	ldd	r24, Y+2	; 0x02
    20e2:	8f 5f       	subi	r24, 0xFF	; 255
    20e4:	8a 83       	std	Y+2, r24	; 0x02

	}
	while(t !=42);
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	8a 32       	cpi	r24, 0x2A	; 42
    20ea:	69 f7       	brne	.-38     	; 0x20c6 <catch_password+0x12>

}
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	0f 90       	pop	r0
    20f2:	0f 90       	pop	r0
    20f4:	cf 91       	pop	r28
    20f6:	df 91       	pop	r29
    20f8:	08 95       	ret

000020fa <pass_equality_check>:
/*
 * the function return 1 if entered pass matches
 * and 0 if wrong pass
 */

uint8 pass_equality_check(){
    20fa:	df 93       	push	r29
    20fc:	cf 93       	push	r28
    20fe:	cd b7       	in	r28, 0x3d	; 61
    2100:	de b7       	in	r29, 0x3e	; 62
    2102:	e2 97       	sbiw	r28, 0x32	; 50
    2104:	0f b6       	in	r0, 0x3f	; 63
    2106:	f8 94       	cli
    2108:	de bf       	out	0x3e, r29	; 62
    210a:	0f be       	out	0x3f, r0	; 63
    210c:	cd bf       	out	0x3d, r28	; 61
	uint8 i=0;
    210e:	1d 8e       	std	Y+29, r1	; 0x1d
	uint8 arr1[10];
	uint8 arr2[10];
	EEPROM_readByte(original_pass_loc,arr1);
    2110:	9e 01       	movw	r18, r28
    2112:	22 5e       	subi	r18, 0xE2	; 226
    2114:	3f 4f       	sbci	r19, 0xFF	; 255
    2116:	81 e1       	ldi	r24, 0x11	; 17
    2118:	93 e0       	ldi	r25, 0x03	; 3
    211a:	b9 01       	movw	r22, r18
    211c:	0e 94 71 06 	call	0xce2	; 0xce2 <EEPROM_readByte>
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	a0 e2       	ldi	r26, 0x20	; 32
    2126:	b1 e4       	ldi	r27, 0x41	; 65
    2128:	89 8f       	std	Y+25, r24	; 0x19
    212a:	9a 8f       	std	Y+26, r25	; 0x1a
    212c:	ab 8f       	std	Y+27, r26	; 0x1b
    212e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2130:	69 8d       	ldd	r22, Y+25	; 0x19
    2132:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2134:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2136:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2138:	20 e0       	ldi	r18, 0x00	; 0
    213a:	30 e0       	ldi	r19, 0x00	; 0
    213c:	4a e7       	ldi	r20, 0x7A	; 122
    213e:	53 e4       	ldi	r21, 0x43	; 67
    2140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2144:	dc 01       	movw	r26, r24
    2146:	cb 01       	movw	r24, r22
    2148:	8d 8b       	std	Y+21, r24	; 0x15
    214a:	9e 8b       	std	Y+22, r25	; 0x16
    214c:	af 8b       	std	Y+23, r26	; 0x17
    214e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2150:	6d 89       	ldd	r22, Y+21	; 0x15
    2152:	7e 89       	ldd	r23, Y+22	; 0x16
    2154:	8f 89       	ldd	r24, Y+23	; 0x17
    2156:	98 8d       	ldd	r25, Y+24	; 0x18
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	40 e8       	ldi	r20, 0x80	; 128
    215e:	5f e3       	ldi	r21, 0x3F	; 63
    2160:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2164:	88 23       	and	r24, r24
    2166:	2c f4       	brge	.+10     	; 0x2172 <pass_equality_check+0x78>
		__ticks = 1;
    2168:	81 e0       	ldi	r24, 0x01	; 1
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	9c 8b       	std	Y+20, r25	; 0x14
    216e:	8b 8b       	std	Y+19, r24	; 0x13
    2170:	3f c0       	rjmp	.+126    	; 0x21f0 <pass_equality_check+0xf6>
	else if (__tmp > 65535)
    2172:	6d 89       	ldd	r22, Y+21	; 0x15
    2174:	7e 89       	ldd	r23, Y+22	; 0x16
    2176:	8f 89       	ldd	r24, Y+23	; 0x17
    2178:	98 8d       	ldd	r25, Y+24	; 0x18
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	3f ef       	ldi	r19, 0xFF	; 255
    217e:	4f e7       	ldi	r20, 0x7F	; 127
    2180:	57 e4       	ldi	r21, 0x47	; 71
    2182:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2186:	18 16       	cp	r1, r24
    2188:	4c f5       	brge	.+82     	; 0x21dc <pass_equality_check+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218a:	69 8d       	ldd	r22, Y+25	; 0x19
    218c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    218e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2190:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2192:	20 e0       	ldi	r18, 0x00	; 0
    2194:	30 e0       	ldi	r19, 0x00	; 0
    2196:	40 e2       	ldi	r20, 0x20	; 32
    2198:	51 e4       	ldi	r21, 0x41	; 65
    219a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219e:	dc 01       	movw	r26, r24
    21a0:	cb 01       	movw	r24, r22
    21a2:	bc 01       	movw	r22, r24
    21a4:	cd 01       	movw	r24, r26
    21a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21aa:	dc 01       	movw	r26, r24
    21ac:	cb 01       	movw	r24, r22
    21ae:	9c 8b       	std	Y+20, r25	; 0x14
    21b0:	8b 8b       	std	Y+19, r24	; 0x13
    21b2:	0f c0       	rjmp	.+30     	; 0x21d2 <pass_equality_check+0xd8>
    21b4:	89 e1       	ldi	r24, 0x19	; 25
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	9a 8b       	std	Y+18, r25	; 0x12
    21ba:	89 8b       	std	Y+17, r24	; 0x11
    21bc:	89 89       	ldd	r24, Y+17	; 0x11
    21be:	9a 89       	ldd	r25, Y+18	; 0x12
    21c0:	01 97       	sbiw	r24, 0x01	; 1
    21c2:	f1 f7       	brne	.-4      	; 0x21c0 <pass_equality_check+0xc6>
    21c4:	9a 8b       	std	Y+18, r25	; 0x12
    21c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c8:	8b 89       	ldd	r24, Y+19	; 0x13
    21ca:	9c 89       	ldd	r25, Y+20	; 0x14
    21cc:	01 97       	sbiw	r24, 0x01	; 1
    21ce:	9c 8b       	std	Y+20, r25	; 0x14
    21d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d2:	8b 89       	ldd	r24, Y+19	; 0x13
    21d4:	9c 89       	ldd	r25, Y+20	; 0x14
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	69 f7       	brne	.-38     	; 0x21b4 <pass_equality_check+0xba>
    21da:	14 c0       	rjmp	.+40     	; 0x2204 <pass_equality_check+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21dc:	6d 89       	ldd	r22, Y+21	; 0x15
    21de:	7e 89       	ldd	r23, Y+22	; 0x16
    21e0:	8f 89       	ldd	r24, Y+23	; 0x17
    21e2:	98 8d       	ldd	r25, Y+24	; 0x18
    21e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e8:	dc 01       	movw	r26, r24
    21ea:	cb 01       	movw	r24, r22
    21ec:	9c 8b       	std	Y+20, r25	; 0x14
    21ee:	8b 8b       	std	Y+19, r24	; 0x13
    21f0:	8b 89       	ldd	r24, Y+19	; 0x13
    21f2:	9c 89       	ldd	r25, Y+20	; 0x14
    21f4:	98 8b       	std	Y+16, r25	; 0x10
    21f6:	8f 87       	std	Y+15, r24	; 0x0f
    21f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    21fa:	98 89       	ldd	r25, Y+16	; 0x10
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <pass_equality_check+0x102>
    2200:	98 8b       	std	Y+16, r25	; 0x10
    2202:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	EEPROM_readByte(repeated_pass_loc,arr2 );
    2204:	9e 01       	movw	r18, r28
    2206:	28 5d       	subi	r18, 0xD8	; 216
    2208:	3f 4f       	sbci	r19, 0xFF	; 255
    220a:	81 e1       	ldi	r24, 0x11	; 17
    220c:	94 e0       	ldi	r25, 0x04	; 4
    220e:	b9 01       	movw	r22, r18
    2210:	0e 94 71 06 	call	0xce2	; 0xce2 <EEPROM_readByte>
    2214:	a4 c0       	rjmp	.+328    	; 0x235e <pass_equality_check+0x264>
	while(arr1[i] !=42 || arr2[i] != 42){
		if (arr1[i] == arr2[i]){
    2216:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2218:	28 2f       	mov	r18, r24
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	ce 01       	movw	r24, r28
    221e:	4e 96       	adiw	r24, 0x1e	; 30
    2220:	fc 01       	movw	r30, r24
    2222:	e2 0f       	add	r30, r18
    2224:	f3 1f       	adc	r31, r19
    2226:	40 81       	ld	r20, Z
    2228:	8d 8d       	ldd	r24, Y+29	; 0x1d
    222a:	28 2f       	mov	r18, r24
    222c:	30 e0       	ldi	r19, 0x00	; 0
    222e:	ce 01       	movw	r24, r28
    2230:	88 96       	adiw	r24, 0x28	; 40
    2232:	fc 01       	movw	r30, r24
    2234:	e2 0f       	add	r30, r18
    2236:	f3 1f       	adc	r31, r19
    2238:	80 81       	ld	r24, Z
    223a:	48 17       	cp	r20, r24
    223c:	29 f0       	breq	.+10     	; 0x2248 <pass_equality_check+0x14e>

		}
		else {UART_sendByte(0);
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	0e 94 4c 13 	call	0x2698	; 0x2698 <UART_sendByte>
			return 0; }
    2244:	1a aa       	std	Y+50, r1	; 0x32
    2246:	a8 c0       	rjmp	.+336    	; 0x2398 <pass_equality_check+0x29e>
		i++;
    2248:	8d 8d       	ldd	r24, Y+29	; 0x1d
    224a:	8f 5f       	subi	r24, 0xFF	; 255
    224c:	8d 8f       	std	Y+29, r24	; 0x1d
		EEPROM_readByte(original_pass_loc+i,arr1);
    224e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2250:	88 2f       	mov	r24, r24
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	8f 5e       	subi	r24, 0xEF	; 239
    2256:	9c 4f       	sbci	r25, 0xFC	; 252
    2258:	9e 01       	movw	r18, r28
    225a:	22 5e       	subi	r18, 0xE2	; 226
    225c:	3f 4f       	sbci	r19, 0xFF	; 255
    225e:	b9 01       	movw	r22, r18
    2260:	0e 94 71 06 	call	0xce2	; 0xce2 <EEPROM_readByte>
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	a0 e2       	ldi	r26, 0x20	; 32
    226a:	b1 e4       	ldi	r27, 0x41	; 65
    226c:	8b 87       	std	Y+11, r24	; 0x0b
    226e:	9c 87       	std	Y+12, r25	; 0x0c
    2270:	ad 87       	std	Y+13, r26	; 0x0d
    2272:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2274:	6b 85       	ldd	r22, Y+11	; 0x0b
    2276:	7c 85       	ldd	r23, Y+12	; 0x0c
    2278:	8d 85       	ldd	r24, Y+13	; 0x0d
    227a:	9e 85       	ldd	r25, Y+14	; 0x0e
    227c:	20 e0       	ldi	r18, 0x00	; 0
    227e:	30 e0       	ldi	r19, 0x00	; 0
    2280:	4a e7       	ldi	r20, 0x7A	; 122
    2282:	53 e4       	ldi	r21, 0x43	; 67
    2284:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2288:	dc 01       	movw	r26, r24
    228a:	cb 01       	movw	r24, r22
    228c:	8f 83       	std	Y+7, r24	; 0x07
    228e:	98 87       	std	Y+8, r25	; 0x08
    2290:	a9 87       	std	Y+9, r26	; 0x09
    2292:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2294:	6f 81       	ldd	r22, Y+7	; 0x07
    2296:	78 85       	ldd	r23, Y+8	; 0x08
    2298:	89 85       	ldd	r24, Y+9	; 0x09
    229a:	9a 85       	ldd	r25, Y+10	; 0x0a
    229c:	20 e0       	ldi	r18, 0x00	; 0
    229e:	30 e0       	ldi	r19, 0x00	; 0
    22a0:	40 e8       	ldi	r20, 0x80	; 128
    22a2:	5f e3       	ldi	r21, 0x3F	; 63
    22a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22a8:	88 23       	and	r24, r24
    22aa:	2c f4       	brge	.+10     	; 0x22b6 <pass_equality_check+0x1bc>
		__ticks = 1;
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	90 e0       	ldi	r25, 0x00	; 0
    22b0:	9e 83       	std	Y+6, r25	; 0x06
    22b2:	8d 83       	std	Y+5, r24	; 0x05
    22b4:	3f c0       	rjmp	.+126    	; 0x2334 <pass_equality_check+0x23a>
	else if (__tmp > 65535)
    22b6:	6f 81       	ldd	r22, Y+7	; 0x07
    22b8:	78 85       	ldd	r23, Y+8	; 0x08
    22ba:	89 85       	ldd	r24, Y+9	; 0x09
    22bc:	9a 85       	ldd	r25, Y+10	; 0x0a
    22be:	20 e0       	ldi	r18, 0x00	; 0
    22c0:	3f ef       	ldi	r19, 0xFF	; 255
    22c2:	4f e7       	ldi	r20, 0x7F	; 127
    22c4:	57 e4       	ldi	r21, 0x47	; 71
    22c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ca:	18 16       	cp	r1, r24
    22cc:	4c f5       	brge	.+82     	; 0x2320 <pass_equality_check+0x226>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    22d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22d6:	20 e0       	ldi	r18, 0x00	; 0
    22d8:	30 e0       	ldi	r19, 0x00	; 0
    22da:	40 e2       	ldi	r20, 0x20	; 32
    22dc:	51 e4       	ldi	r21, 0x41	; 65
    22de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22e2:	dc 01       	movw	r26, r24
    22e4:	cb 01       	movw	r24, r22
    22e6:	bc 01       	movw	r22, r24
    22e8:	cd 01       	movw	r24, r26
    22ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22ee:	dc 01       	movw	r26, r24
    22f0:	cb 01       	movw	r24, r22
    22f2:	9e 83       	std	Y+6, r25	; 0x06
    22f4:	8d 83       	std	Y+5, r24	; 0x05
    22f6:	0f c0       	rjmp	.+30     	; 0x2316 <pass_equality_check+0x21c>
    22f8:	89 e1       	ldi	r24, 0x19	; 25
    22fa:	90 e0       	ldi	r25, 0x00	; 0
    22fc:	9c 83       	std	Y+4, r25	; 0x04
    22fe:	8b 83       	std	Y+3, r24	; 0x03
    2300:	8b 81       	ldd	r24, Y+3	; 0x03
    2302:	9c 81       	ldd	r25, Y+4	; 0x04
    2304:	01 97       	sbiw	r24, 0x01	; 1
    2306:	f1 f7       	brne	.-4      	; 0x2304 <pass_equality_check+0x20a>
    2308:	9c 83       	std	Y+4, r25	; 0x04
    230a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    230c:	8d 81       	ldd	r24, Y+5	; 0x05
    230e:	9e 81       	ldd	r25, Y+6	; 0x06
    2310:	01 97       	sbiw	r24, 0x01	; 1
    2312:	9e 83       	std	Y+6, r25	; 0x06
    2314:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2316:	8d 81       	ldd	r24, Y+5	; 0x05
    2318:	9e 81       	ldd	r25, Y+6	; 0x06
    231a:	00 97       	sbiw	r24, 0x00	; 0
    231c:	69 f7       	brne	.-38     	; 0x22f8 <pass_equality_check+0x1fe>
    231e:	14 c0       	rjmp	.+40     	; 0x2348 <pass_equality_check+0x24e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2320:	6f 81       	ldd	r22, Y+7	; 0x07
    2322:	78 85       	ldd	r23, Y+8	; 0x08
    2324:	89 85       	ldd	r24, Y+9	; 0x09
    2326:	9a 85       	ldd	r25, Y+10	; 0x0a
    2328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	9e 83       	std	Y+6, r25	; 0x06
    2332:	8d 83       	std	Y+5, r24	; 0x05
    2334:	8d 81       	ldd	r24, Y+5	; 0x05
    2336:	9e 81       	ldd	r25, Y+6	; 0x06
    2338:	9a 83       	std	Y+2, r25	; 0x02
    233a:	89 83       	std	Y+1, r24	; 0x01
    233c:	89 81       	ldd	r24, Y+1	; 0x01
    233e:	9a 81       	ldd	r25, Y+2	; 0x02
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	f1 f7       	brne	.-4      	; 0x2340 <pass_equality_check+0x246>
    2344:	9a 83       	std	Y+2, r25	; 0x02
    2346:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		EEPROM_readByte(repeated_pass_loc+i,arr2 );
    2348:	8d 8d       	ldd	r24, Y+29	; 0x1d
    234a:	88 2f       	mov	r24, r24
    234c:	90 e0       	ldi	r25, 0x00	; 0
    234e:	8f 5e       	subi	r24, 0xEF	; 239
    2350:	9b 4f       	sbci	r25, 0xFB	; 251
    2352:	9e 01       	movw	r18, r28
    2354:	28 5d       	subi	r18, 0xD8	; 216
    2356:	3f 4f       	sbci	r19, 0xFF	; 255
    2358:	b9 01       	movw	r22, r18
    235a:	0e 94 71 06 	call	0xce2	; 0xce2 <EEPROM_readByte>
	uint8 arr1[10];
	uint8 arr2[10];
	EEPROM_readByte(original_pass_loc,arr1);
	_delay_ms(10);
	EEPROM_readByte(repeated_pass_loc,arr2 );
	while(arr1[i] !=42 || arr2[i] != 42){
    235e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2360:	28 2f       	mov	r18, r24
    2362:	30 e0       	ldi	r19, 0x00	; 0
    2364:	ce 01       	movw	r24, r28
    2366:	4e 96       	adiw	r24, 0x1e	; 30
    2368:	fc 01       	movw	r30, r24
    236a:	e2 0f       	add	r30, r18
    236c:	f3 1f       	adc	r31, r19
    236e:	80 81       	ld	r24, Z
    2370:	8a 32       	cpi	r24, 0x2A	; 42
    2372:	09 f0       	breq	.+2      	; 0x2376 <pass_equality_check+0x27c>
    2374:	50 cf       	rjmp	.-352    	; 0x2216 <pass_equality_check+0x11c>
    2376:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2378:	28 2f       	mov	r18, r24
    237a:	30 e0       	ldi	r19, 0x00	; 0
    237c:	ce 01       	movw	r24, r28
    237e:	88 96       	adiw	r24, 0x28	; 40
    2380:	fc 01       	movw	r30, r24
    2382:	e2 0f       	add	r30, r18
    2384:	f3 1f       	adc	r31, r19
    2386:	80 81       	ld	r24, Z
    2388:	8a 32       	cpi	r24, 0x2A	; 42
    238a:	09 f0       	breq	.+2      	; 0x238e <pass_equality_check+0x294>
    238c:	44 cf       	rjmp	.-376    	; 0x2216 <pass_equality_check+0x11c>
		i++;
		EEPROM_readByte(original_pass_loc+i,arr1);
		_delay_ms(10);
		EEPROM_readByte(repeated_pass_loc+i,arr2 );
	}
	UART_sendByte(1);
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	0e 94 4c 13 	call	0x2698	; 0x2698 <UART_sendByte>
	return 1;
    2394:	81 e0       	ldi	r24, 0x01	; 1
    2396:	8a ab       	std	Y+50, r24	; 0x32
    2398:	8a a9       	ldd	r24, Y+50	; 0x32
}
    239a:	e2 96       	adiw	r28, 0x32	; 50
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	de bf       	out	0x3e, r29	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	cd bf       	out	0x3d, r28	; 61
    23a6:	cf 91       	pop	r28
    23a8:	df 91       	pop	r29
    23aa:	08 95       	ret

000023ac <change_password>:

////////////////////// function to change pass ///////////////////////////////////////

void change_password(void){
    23ac:	df 93       	push	r29
    23ae:	cf 93       	push	r28
    23b0:	cd b7       	in	r28, 0x3d	; 61
    23b2:	de b7       	in	r29, 0x3e	; 62
    23b4:	2e 97       	sbiw	r28, 0x0e	; 14
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	de bf       	out	0x3e, r29	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	cd bf       	out	0x3d, r28	; 61
	do{

	catch_password(original_pass_loc);
    23c0:	81 e1       	ldi	r24, 0x11	; 17
    23c2:	93 e0       	ldi	r25, 0x03	; 3
    23c4:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <catch_password>
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	a0 e2       	ldi	r26, 0x20	; 32
    23ce:	b1 e4       	ldi	r27, 0x41	; 65
    23d0:	8b 87       	std	Y+11, r24	; 0x0b
    23d2:	9c 87       	std	Y+12, r25	; 0x0c
    23d4:	ad 87       	std	Y+13, r26	; 0x0d
    23d6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23da:	7c 85       	ldd	r23, Y+12	; 0x0c
    23dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23de:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	4a e7       	ldi	r20, 0x7A	; 122
    23e6:	53 e4       	ldi	r21, 0x43	; 67
    23e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	8f 83       	std	Y+7, r24	; 0x07
    23f2:	98 87       	std	Y+8, r25	; 0x08
    23f4:	a9 87       	std	Y+9, r26	; 0x09
    23f6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23f8:	6f 81       	ldd	r22, Y+7	; 0x07
    23fa:	78 85       	ldd	r23, Y+8	; 0x08
    23fc:	89 85       	ldd	r24, Y+9	; 0x09
    23fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e8       	ldi	r20, 0x80	; 128
    2406:	5f e3       	ldi	r21, 0x3F	; 63
    2408:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    240c:	88 23       	and	r24, r24
    240e:	2c f4       	brge	.+10     	; 0x241a <change_password+0x6e>
		__ticks = 1;
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	9e 83       	std	Y+6, r25	; 0x06
    2416:	8d 83       	std	Y+5, r24	; 0x05
    2418:	3f c0       	rjmp	.+126    	; 0x2498 <change_password+0xec>
	else if (__tmp > 65535)
    241a:	6f 81       	ldd	r22, Y+7	; 0x07
    241c:	78 85       	ldd	r23, Y+8	; 0x08
    241e:	89 85       	ldd	r24, Y+9	; 0x09
    2420:	9a 85       	ldd	r25, Y+10	; 0x0a
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	3f ef       	ldi	r19, 0xFF	; 255
    2426:	4f e7       	ldi	r20, 0x7F	; 127
    2428:	57 e4       	ldi	r21, 0x47	; 71
    242a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    242e:	18 16       	cp	r1, r24
    2430:	4c f5       	brge	.+82     	; 0x2484 <change_password+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2432:	6b 85       	ldd	r22, Y+11	; 0x0b
    2434:	7c 85       	ldd	r23, Y+12	; 0x0c
    2436:	8d 85       	ldd	r24, Y+13	; 0x0d
    2438:	9e 85       	ldd	r25, Y+14	; 0x0e
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e2       	ldi	r20, 0x20	; 32
    2440:	51 e4       	ldi	r21, 0x41	; 65
    2442:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	bc 01       	movw	r22, r24
    244c:	cd 01       	movw	r24, r26
    244e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	9e 83       	std	Y+6, r25	; 0x06
    2458:	8d 83       	std	Y+5, r24	; 0x05
    245a:	0f c0       	rjmp	.+30     	; 0x247a <change_password+0xce>
    245c:	89 e1       	ldi	r24, 0x19	; 25
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	9c 83       	std	Y+4, r25	; 0x04
    2462:	8b 83       	std	Y+3, r24	; 0x03
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	9c 81       	ldd	r25, Y+4	; 0x04
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <change_password+0xbc>
    246c:	9c 83       	std	Y+4, r25	; 0x04
    246e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2470:	8d 81       	ldd	r24, Y+5	; 0x05
    2472:	9e 81       	ldd	r25, Y+6	; 0x06
    2474:	01 97       	sbiw	r24, 0x01	; 1
    2476:	9e 83       	std	Y+6, r25	; 0x06
    2478:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247a:	8d 81       	ldd	r24, Y+5	; 0x05
    247c:	9e 81       	ldd	r25, Y+6	; 0x06
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	69 f7       	brne	.-38     	; 0x245c <change_password+0xb0>
    2482:	14 c0       	rjmp	.+40     	; 0x24ac <change_password+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2484:	6f 81       	ldd	r22, Y+7	; 0x07
    2486:	78 85       	ldd	r23, Y+8	; 0x08
    2488:	89 85       	ldd	r24, Y+9	; 0x09
    248a:	9a 85       	ldd	r25, Y+10	; 0x0a
    248c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	9e 83       	std	Y+6, r25	; 0x06
    2496:	8d 83       	std	Y+5, r24	; 0x05
    2498:	8d 81       	ldd	r24, Y+5	; 0x05
    249a:	9e 81       	ldd	r25, Y+6	; 0x06
    249c:	9a 83       	std	Y+2, r25	; 0x02
    249e:	89 83       	std	Y+1, r24	; 0x01
    24a0:	89 81       	ldd	r24, Y+1	; 0x01
    24a2:	9a 81       	ldd	r25, Y+2	; 0x02
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	f1 f7       	brne	.-4      	; 0x24a4 <change_password+0xf8>
    24a8:	9a 83       	std	Y+2, r25	; 0x02
    24aa:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	catch_password(repeated_pass_loc);
    24ac:	81 e1       	ldi	r24, 0x11	; 17
    24ae:	94 e0       	ldi	r25, 0x04	; 4
    24b0:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <catch_password>
	}
	while(!(pass_equality_check()));
    24b4:	0e 94 7d 10 	call	0x20fa	; 0x20fa <pass_equality_check>
    24b8:	88 23       	and	r24, r24
    24ba:	09 f4       	brne	.+2      	; 0x24be <change_password+0x112>
    24bc:	81 cf       	rjmp	.-254    	; 0x23c0 <change_password+0x14>
}
    24be:	2e 96       	adiw	r28, 0x0e	; 14
    24c0:	0f b6       	in	r0, 0x3f	; 63
    24c2:	f8 94       	cli
    24c4:	de bf       	out	0x3e, r29	; 62
    24c6:	0f be       	out	0x3f, r0	; 63
    24c8:	cd bf       	out	0x3d, r28	; 61
    24ca:	cf 91       	pop	r28
    24cc:	df 91       	pop	r29
    24ce:	08 95       	ret

000024d0 <entering_password>:
/*
 * ask you for a pass if wrong it gives you a 3 trials
 * it returns the number of wrong trials
 */

uint8 entering_password(void){
    24d0:	df 93       	push	r29
    24d2:	cf 93       	push	r28
    24d4:	0f 92       	push	r0
    24d6:	cd b7       	in	r28, 0x3d	; 61
    24d8:	de b7       	in	r29, 0x3e	; 62

	uint8 i;
			catch_password(repeated_pass_loc);
    24da:	81 e1       	ldi	r24, 0x11	; 17
    24dc:	94 e0       	ldi	r25, 0x04	; 4
    24de:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <catch_password>
		for( i=0;i<2 && !(pass_equality_check());i++){
    24e2:	19 82       	std	Y+1, r1	; 0x01
    24e4:	07 c0       	rjmp	.+14     	; 0x24f4 <entering_password+0x24>
		catch_password(repeated_pass_loc);
    24e6:	81 e1       	ldi	r24, 0x11	; 17
    24e8:	94 e0       	ldi	r25, 0x04	; 4
    24ea:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <catch_password>

uint8 entering_password(void){

	uint8 i;
			catch_password(repeated_pass_loc);
		for( i=0;i<2 && !(pass_equality_check());i++){
    24ee:	89 81       	ldd	r24, Y+1	; 0x01
    24f0:	8f 5f       	subi	r24, 0xFF	; 255
    24f2:	89 83       	std	Y+1, r24	; 0x01
    24f4:	89 81       	ldd	r24, Y+1	; 0x01
    24f6:	82 30       	cpi	r24, 0x02	; 2
    24f8:	20 f4       	brcc	.+8      	; 0x2502 <entering_password+0x32>
    24fa:	0e 94 7d 10 	call	0x20fa	; 0x20fa <pass_equality_check>
    24fe:	88 23       	and	r24, r24
    2500:	91 f3       	breq	.-28     	; 0x24e6 <entering_password+0x16>
		catch_password(repeated_pass_loc);
		}
		return i ;
    2502:	89 81       	ldd	r24, Y+1	; 0x01

}
    2504:	0f 90       	pop	r0
    2506:	cf 91       	pop	r28
    2508:	df 91       	pop	r29
    250a:	08 95       	ret

0000250c <__vector_6>:
#include "timer.h"
 uint8 flag=0;
 extern uint8 flag2=0;

ISR(TIMER1_COMPA_vect)
{
    250c:	1f 92       	push	r1
    250e:	0f 92       	push	r0
    2510:	0f b6       	in	r0, 0x3f	; 63
    2512:	0f 92       	push	r0
    2514:	11 24       	eor	r1, r1
    2516:	2f 93       	push	r18
    2518:	3f 93       	push	r19
    251a:	4f 93       	push	r20
    251c:	5f 93       	push	r21
    251e:	6f 93       	push	r22
    2520:	7f 93       	push	r23
    2522:	8f 93       	push	r24
    2524:	9f 93       	push	r25
    2526:	af 93       	push	r26
    2528:	bf 93       	push	r27
    252a:	ef 93       	push	r30
    252c:	ff 93       	push	r31
    252e:	df 93       	push	r29
    2530:	cf 93       	push	r28
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
	flag++;
    2536:	80 91 68 00 	lds	r24, 0x0068
    253a:	8f 5f       	subi	r24, 0xFF	; 255
    253c:	80 93 68 00 	sts	0x0068, r24
	if(flag==15 && flag2==0){
    2540:	80 91 68 00 	lds	r24, 0x0068
    2544:	8f 30       	cpi	r24, 0x0F	; 15
    2546:	b1 f4       	brne	.+44     	; 0x2574 <__vector_6+0x68>
    2548:	80 91 69 00 	lds	r24, 0x0069
    254c:	88 23       	and	r24, r24
    254e:	91 f4       	brne	.+36     	; 0x2574 <__vector_6+0x68>
		SET_BIT(PORTC,motor_l);
    2550:	a5 e3       	ldi	r26, 0x35	; 53
    2552:	b0 e0       	ldi	r27, 0x00	; 0
    2554:	e5 e3       	ldi	r30, 0x35	; 53
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	80 81       	ld	r24, Z
    255a:	88 60       	ori	r24, 0x08	; 8
    255c:	8c 93       	st	X, r24
		CLEAR_BIT(PORTC,motor_r);
    255e:	a5 e3       	ldi	r26, 0x35	; 53
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	e5 e3       	ldi	r30, 0x35	; 53
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	8b 7f       	andi	r24, 0xFB	; 251
    256a:	8c 93       	st	X, r24
		UART_sendByte(1);
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	0e 94 4c 13 	call	0x2698	; 0x2698 <UART_sendByte>
	}
	if(flag==30 && flag2==0){
    2574:	80 91 68 00 	lds	r24, 0x0068
    2578:	8e 31       	cpi	r24, 0x1E	; 30
    257a:	d1 f4       	brne	.+52     	; 0x25b0 <__vector_6+0xa4>
    257c:	80 91 69 00 	lds	r24, 0x0069
    2580:	88 23       	and	r24, r24
    2582:	b1 f4       	brne	.+44     	; 0x25b0 <__vector_6+0xa4>
		CLEAR_BIT(PORTC,motor_r);
    2584:	a5 e3       	ldi	r26, 0x35	; 53
    2586:	b0 e0       	ldi	r27, 0x00	; 0
    2588:	e5 e3       	ldi	r30, 0x35	; 53
    258a:	f0 e0       	ldi	r31, 0x00	; 0
    258c:	80 81       	ld	r24, Z
    258e:	8b 7f       	andi	r24, 0xFB	; 251
    2590:	8c 93       	st	X, r24
		CLEAR_BIT(PORTC,motor_l);
    2592:	a5 e3       	ldi	r26, 0x35	; 53
    2594:	b0 e0       	ldi	r27, 0x00	; 0
    2596:	e5 e3       	ldi	r30, 0x35	; 53
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	87 7f       	andi	r24, 0xF7	; 247
    259e:	8c 93       	st	X, r24
		UART_sendByte(1);
    25a0:	81 e0       	ldi	r24, 0x01	; 1
    25a2:	90 e0       	ldi	r25, 0x00	; 0
    25a4:	0e 94 4c 13 	call	0x2698	; 0x2698 <UART_sendByte>
		timer1_deinit_CTC_mode();
    25a8:	0e 94 24 13 	call	0x2648	; 0x2648 <timer1_deinit_CTC_mode>
		flag=0;
    25ac:	10 92 68 00 	sts	0x0068, r1
	}
	if(flag==60 && flag2==1){
    25b0:	80 91 68 00 	lds	r24, 0x0068
    25b4:	8c 33       	cpi	r24, 0x3C	; 60
    25b6:	a9 f4       	brne	.+42     	; 0x25e2 <__vector_6+0xd6>
    25b8:	80 91 69 00 	lds	r24, 0x0069
    25bc:	81 30       	cpi	r24, 0x01	; 1
    25be:	89 f4       	brne	.+34     	; 0x25e2 <__vector_6+0xd6>
		flag2=0;
    25c0:	10 92 69 00 	sts	0x0069, r1
		flag=0;
    25c4:	10 92 68 00 	sts	0x0068, r1
		CLEAR_BIT(PORTC,buzz);
    25c8:	a5 e3       	ldi	r26, 0x35	; 53
    25ca:	b0 e0       	ldi	r27, 0x00	; 0
    25cc:	e5 e3       	ldi	r30, 0x35	; 53
    25ce:	f0 e0       	ldi	r31, 0x00	; 0
    25d0:	80 81       	ld	r24, Z
    25d2:	8b 7f       	andi	r24, 0xFB	; 251
    25d4:	8c 93       	st	X, r24
		UART_sendByte(1);
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	0e 94 4c 13 	call	0x2698	; 0x2698 <UART_sendByte>
		timer1_deinit_CTC_mode();
    25de:	0e 94 24 13 	call	0x2648	; 0x2648 <timer1_deinit_CTC_mode>
	}
}
    25e2:	cf 91       	pop	r28
    25e4:	df 91       	pop	r29
    25e6:	ff 91       	pop	r31
    25e8:	ef 91       	pop	r30
    25ea:	bf 91       	pop	r27
    25ec:	af 91       	pop	r26
    25ee:	9f 91       	pop	r25
    25f0:	8f 91       	pop	r24
    25f2:	7f 91       	pop	r23
    25f4:	6f 91       	pop	r22
    25f6:	5f 91       	pop	r21
    25f8:	4f 91       	pop	r20
    25fa:	3f 91       	pop	r19
    25fc:	2f 91       	pop	r18
    25fe:	0f 90       	pop	r0
    2600:	0f be       	out	0x3f, r0	; 63
    2602:	0f 90       	pop	r0
    2604:	1f 90       	pop	r1
    2606:	18 95       	reti

00002608 <timer1_init_CTC_mode>:

void timer1_init_CTC_mode(void)
{
    2608:	df 93       	push	r29
    260a:	cf 93       	push	r28
    260c:	cd b7       	in	r28, 0x3d	; 61
    260e:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0; //timer initial value
    2610:	ec e4       	ldi	r30, 0x4C	; 76
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	11 82       	std	Z+1, r1	; 0x01
    2616:	10 82       	st	Z, r1
	OCR1A  = 900; //compare value
    2618:	ea e4       	ldi	r30, 0x4A	; 74
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	84 e8       	ldi	r24, 0x84	; 132
    261e:	93 e0       	ldi	r25, 0x03	; 3
    2620:	91 83       	std	Z+1, r25	; 0x01
    2622:	80 83       	st	Z, r24
	TIMSK |= (1<<OCIE1A); //enable compare interrupt for channel A
    2624:	a9 e5       	ldi	r26, 0x59	; 89
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	e9 e5       	ldi	r30, 0x59	; 89
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	80 81       	ld	r24, Z
    262e:	80 61       	ori	r24, 0x10	; 16
    2630:	8c 93       	st	X, r24
	/* Configure timer1 control registers
	 * 1. Non PWM mode FOC1A=1 and FOC1B=1
	 * 2. No need for OC1A & OC1B in this example so COM1A0=0 & COM1A1=0 & COM1B0=0 & COM1B1=0
	 * 3. CTC Mode and compare value in OCR1A WGM10=0 & WGM11=0 & WGM12=1 & WGM13=0
	 */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2632:	ef e4       	ldi	r30, 0x4F	; 79
    2634:	f0 e0       	ldi	r31, 0x00	; 0
    2636:	8c e0       	ldi	r24, 0x0C	; 12
    2638:	80 83       	st	Z, r24
	/*
	 * 4. Clock = F_CPU/1024 CS10=1 CS11=0 CS12=1
	 */
	TCCR1B = (1<<WGM12) | (1<<CS10) | (1<<CS12);
    263a:	ee e4       	ldi	r30, 0x4E	; 78
    263c:	f0 e0       	ldi	r31, 0x00	; 0
    263e:	8d e0       	ldi	r24, 0x0D	; 13
    2640:	80 83       	st	Z, r24
}
    2642:	cf 91       	pop	r28
    2644:	df 91       	pop	r29
    2646:	08 95       	ret

00002648 <timer1_deinit_CTC_mode>:


void timer1_deinit_CTC_mode(void)
{
    2648:	df 93       	push	r29
    264a:	cf 93       	push	r28
    264c:	cd b7       	in	r28, 0x3d	; 61
    264e:	de b7       	in	r29, 0x3e	; 62

	TIMSK &= ~(1<<OCIE1A); //enable compare interrupt for channel A
    2650:	a9 e5       	ldi	r26, 0x59	; 89
    2652:	b0 e0       	ldi	r27, 0x00	; 0
    2654:	e9 e5       	ldi	r30, 0x59	; 89
    2656:	f0 e0       	ldi	r31, 0x00	; 0
    2658:	80 81       	ld	r24, Z
    265a:	8f 7e       	andi	r24, 0xEF	; 239
    265c:	8c 93       	st	X, r24

}
    265e:	cf 91       	pop	r28
    2660:	df 91       	pop	r29
    2662:	08 95       	ret

00002664 <UART_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(void)
{
    2664:	df 93       	push	r29
    2666:	cf 93       	push	r28
    2668:	cd b7       	in	r28, 0x3d	; 61
    266a:	de b7       	in	r29, 0x3e	; 62
	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    266c:	eb e2       	ldi	r30, 0x2B	; 43
    266e:	f0 e0       	ldi	r31, 0x00	; 0
    2670:	82 e0       	ldi	r24, 0x02	; 2
    2672:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2674:	ea e2       	ldi	r30, 0x2A	; 42
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	88 e1       	ldi	r24, 0x18	; 24
    267a:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1);
    267c:	e0 e4       	ldi	r30, 0x40	; 64
    267e:	f0 e0       	ldi	r31, 0x00	; 0
    2680:	86 e8       	ldi	r24, 0x86	; 134
    2682:	80 83       	st	Z, r24

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = BAUD_PRESCALE>>8;
    2684:	e0 e4       	ldi	r30, 0x40	; 64
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    268a:	e9 e2       	ldi	r30, 0x29	; 41
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	8c e0       	ldi	r24, 0x0C	; 12
    2690:	80 83       	st	Z, r24
}
    2692:	cf 91       	pop	r28
    2694:	df 91       	pop	r29
    2696:	08 95       	ret

00002698 <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    2698:	df 93       	push	r29
    269a:	cf 93       	push	r28
    269c:	0f 92       	push	r0
    269e:	cd b7       	in	r28, 0x3d	; 61
    26a0:	de b7       	in	r29, 0x3e	; 62
    26a2:	89 83       	std	Y+1, r24	; 0x01
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    26a4:	eb e2       	ldi	r30, 0x2B	; 43
    26a6:	f0 e0       	ldi	r31, 0x00	; 0
    26a8:	80 81       	ld	r24, Z
    26aa:	88 2f       	mov	r24, r24
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	80 72       	andi	r24, 0x20	; 32
    26b0:	90 70       	andi	r25, 0x00	; 0
    26b2:	00 97       	sbiw	r24, 0x00	; 0
    26b4:	b9 f3       	breq	.-18     	; 0x26a4 <UART_sendByte+0xc>
	/* Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now */
	UDR = data;
    26b6:	ec e2       	ldi	r30, 0x2C	; 44
    26b8:	f0 e0       	ldi	r31, 0x00	; 0
    26ba:	89 81       	ldd	r24, Y+1	; 0x01
    26bc:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    26be:	0f 90       	pop	r0
    26c0:	cf 91       	pop	r28
    26c2:	df 91       	pop	r29
    26c4:	08 95       	ret

000026c6 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    26c6:	df 93       	push	r29
    26c8:	cf 93       	push	r28
    26ca:	cd b7       	in	r28, 0x3d	; 61
    26cc:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    26ce:	eb e2       	ldi	r30, 0x2B	; 43
    26d0:	f0 e0       	ldi	r31, 0x00	; 0
    26d2:	80 81       	ld	r24, Z
    26d4:	88 23       	and	r24, r24
    26d6:	dc f7       	brge	.-10     	; 0x26ce <UART_recieveByte+0x8>
	/* Read the received data from the Rx buffer (UDR) and the RXC flag
	   will be cleared after read this data */
    return UDR;
    26d8:	ec e2       	ldi	r30, 0x2C	; 44
    26da:	f0 e0       	ldi	r31, 0x00	; 0
    26dc:	80 81       	ld	r24, Z
}
    26de:	cf 91       	pop	r28
    26e0:	df 91       	pop	r29
    26e2:	08 95       	ret

000026e4 <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    26e4:	df 93       	push	r29
    26e6:	cf 93       	push	r28
    26e8:	00 d0       	rcall	.+0      	; 0x26ea <UART_sendString+0x6>
    26ea:	0f 92       	push	r0
    26ec:	cd b7       	in	r28, 0x3d	; 61
    26ee:	de b7       	in	r29, 0x3e	; 62
    26f0:	9b 83       	std	Y+3, r25	; 0x03
    26f2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    26f4:	19 82       	std	Y+1, r1	; 0x01
    26f6:	0e c0       	rjmp	.+28     	; 0x2714 <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	28 2f       	mov	r18, r24
    26fc:	30 e0       	ldi	r19, 0x00	; 0
    26fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2700:	9b 81       	ldd	r25, Y+3	; 0x03
    2702:	fc 01       	movw	r30, r24
    2704:	e2 0f       	add	r30, r18
    2706:	f3 1f       	adc	r31, r19
    2708:	80 81       	ld	r24, Z
    270a:	0e 94 4c 13 	call	0x2698	; 0x2698 <UART_sendByte>
		i++;
    270e:	89 81       	ldd	r24, Y+1	; 0x01
    2710:	8f 5f       	subi	r24, 0xFF	; 255
    2712:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2714:	89 81       	ldd	r24, Y+1	; 0x01
    2716:	28 2f       	mov	r18, r24
    2718:	30 e0       	ldi	r19, 0x00	; 0
    271a:	8a 81       	ldd	r24, Y+2	; 0x02
    271c:	9b 81       	ldd	r25, Y+3	; 0x03
    271e:	fc 01       	movw	r30, r24
    2720:	e2 0f       	add	r30, r18
    2722:	f3 1f       	adc	r31, r19
    2724:	80 81       	ld	r24, Z
    2726:	88 23       	and	r24, r24
    2728:	39 f7       	brne	.-50     	; 0x26f8 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
	UART_sendByte('#');
    272a:	83 e2       	ldi	r24, 0x23	; 35
    272c:	0e 94 4c 13 	call	0x2698	; 0x2698 <UART_sendByte>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2730:	0f 90       	pop	r0
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	cf 91       	pop	r28
    2738:	df 91       	pop	r29
    273a:	08 95       	ret

0000273c <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    273c:	0f 93       	push	r16
    273e:	1f 93       	push	r17
    2740:	df 93       	push	r29
    2742:	cf 93       	push	r28
    2744:	00 d0       	rcall	.+0      	; 0x2746 <UART_receiveString+0xa>
    2746:	0f 92       	push	r0
    2748:	cd b7       	in	r28, 0x3d	; 61
    274a:	de b7       	in	r29, 0x3e	; 62
    274c:	9b 83       	std	Y+3, r25	; 0x03
    274e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2750:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2752:	89 81       	ldd	r24, Y+1	; 0x01
    2754:	28 2f       	mov	r18, r24
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	8a 81       	ldd	r24, Y+2	; 0x02
    275a:	9b 81       	ldd	r25, Y+3	; 0x03
    275c:	8c 01       	movw	r16, r24
    275e:	02 0f       	add	r16, r18
    2760:	13 1f       	adc	r17, r19
    2762:	0e 94 63 13 	call	0x26c6	; 0x26c6 <UART_recieveByte>
    2766:	f8 01       	movw	r30, r16
    2768:	80 83       	st	Z, r24
    276a:	0f c0       	rjmp	.+30     	; 0x278a <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    276c:	89 81       	ldd	r24, Y+1	; 0x01
    276e:	8f 5f       	subi	r24, 0xFF	; 255
    2770:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2772:	89 81       	ldd	r24, Y+1	; 0x01
    2774:	28 2f       	mov	r18, r24
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	8a 81       	ldd	r24, Y+2	; 0x02
    277a:	9b 81       	ldd	r25, Y+3	; 0x03
    277c:	8c 01       	movw	r16, r24
    277e:	02 0f       	add	r16, r18
    2780:	13 1f       	adc	r17, r19
    2782:	0e 94 63 13 	call	0x26c6	; 0x26c6 <UART_recieveByte>
    2786:	f8 01       	movw	r30, r16
    2788:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    278a:	89 81       	ldd	r24, Y+1	; 0x01
    278c:	28 2f       	mov	r18, r24
    278e:	30 e0       	ldi	r19, 0x00	; 0
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	9b 81       	ldd	r25, Y+3	; 0x03
    2794:	fc 01       	movw	r30, r24
    2796:	e2 0f       	add	r30, r18
    2798:	f3 1f       	adc	r31, r19
    279a:	80 81       	ld	r24, Z
    279c:	83 32       	cpi	r24, 0x23	; 35
    279e:	31 f7       	brne	.-52     	; 0x276c <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    27a0:	89 81       	ldd	r24, Y+1	; 0x01
    27a2:	28 2f       	mov	r18, r24
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	8a 81       	ldd	r24, Y+2	; 0x02
    27a8:	9b 81       	ldd	r25, Y+3	; 0x03
    27aa:	fc 01       	movw	r30, r24
    27ac:	e2 0f       	add	r30, r18
    27ae:	f3 1f       	adc	r31, r19
    27b0:	10 82       	st	Z, r1
}
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	0f 90       	pop	r0
    27b8:	cf 91       	pop	r28
    27ba:	df 91       	pop	r29
    27bc:	1f 91       	pop	r17
    27be:	0f 91       	pop	r16
    27c0:	08 95       	ret

000027c2 <__prologue_saves__>:
    27c2:	2f 92       	push	r2
    27c4:	3f 92       	push	r3
    27c6:	4f 92       	push	r4
    27c8:	5f 92       	push	r5
    27ca:	6f 92       	push	r6
    27cc:	7f 92       	push	r7
    27ce:	8f 92       	push	r8
    27d0:	9f 92       	push	r9
    27d2:	af 92       	push	r10
    27d4:	bf 92       	push	r11
    27d6:	cf 92       	push	r12
    27d8:	df 92       	push	r13
    27da:	ef 92       	push	r14
    27dc:	ff 92       	push	r15
    27de:	0f 93       	push	r16
    27e0:	1f 93       	push	r17
    27e2:	cf 93       	push	r28
    27e4:	df 93       	push	r29
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
    27ea:	ca 1b       	sub	r28, r26
    27ec:	db 0b       	sbc	r29, r27
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	de bf       	out	0x3e, r29	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	cd bf       	out	0x3d, r28	; 61
    27f8:	09 94       	ijmp

000027fa <__epilogue_restores__>:
    27fa:	2a 88       	ldd	r2, Y+18	; 0x12
    27fc:	39 88       	ldd	r3, Y+17	; 0x11
    27fe:	48 88       	ldd	r4, Y+16	; 0x10
    2800:	5f 84       	ldd	r5, Y+15	; 0x0f
    2802:	6e 84       	ldd	r6, Y+14	; 0x0e
    2804:	7d 84       	ldd	r7, Y+13	; 0x0d
    2806:	8c 84       	ldd	r8, Y+12	; 0x0c
    2808:	9b 84       	ldd	r9, Y+11	; 0x0b
    280a:	aa 84       	ldd	r10, Y+10	; 0x0a
    280c:	b9 84       	ldd	r11, Y+9	; 0x09
    280e:	c8 84       	ldd	r12, Y+8	; 0x08
    2810:	df 80       	ldd	r13, Y+7	; 0x07
    2812:	ee 80       	ldd	r14, Y+6	; 0x06
    2814:	fd 80       	ldd	r15, Y+5	; 0x05
    2816:	0c 81       	ldd	r16, Y+4	; 0x04
    2818:	1b 81       	ldd	r17, Y+3	; 0x03
    281a:	aa 81       	ldd	r26, Y+2	; 0x02
    281c:	b9 81       	ldd	r27, Y+1	; 0x01
    281e:	ce 0f       	add	r28, r30
    2820:	d1 1d       	adc	r29, r1
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	ed 01       	movw	r28, r26
    282e:	08 95       	ret

00002830 <itoa>:
    2830:	fb 01       	movw	r30, r22
    2832:	9f 01       	movw	r18, r30
    2834:	e8 94       	clt
    2836:	42 30       	cpi	r20, 0x02	; 2
    2838:	c4 f0       	brlt	.+48     	; 0x286a <itoa+0x3a>
    283a:	45 32       	cpi	r20, 0x25	; 37
    283c:	b4 f4       	brge	.+44     	; 0x286a <itoa+0x3a>
    283e:	4a 30       	cpi	r20, 0x0A	; 10
    2840:	29 f4       	brne	.+10     	; 0x284c <itoa+0x1c>
    2842:	97 fb       	bst	r25, 7
    2844:	1e f4       	brtc	.+6      	; 0x284c <itoa+0x1c>
    2846:	90 95       	com	r25
    2848:	81 95       	neg	r24
    284a:	9f 4f       	sbci	r25, 0xFF	; 255
    284c:	64 2f       	mov	r22, r20
    284e:	77 27       	eor	r23, r23
    2850:	0e 94 49 14 	call	0x2892	; 0x2892 <__udivmodhi4>
    2854:	80 5d       	subi	r24, 0xD0	; 208
    2856:	8a 33       	cpi	r24, 0x3A	; 58
    2858:	0c f0       	brlt	.+2      	; 0x285c <itoa+0x2c>
    285a:	89 5d       	subi	r24, 0xD9	; 217
    285c:	81 93       	st	Z+, r24
    285e:	cb 01       	movw	r24, r22
    2860:	00 97       	sbiw	r24, 0x00	; 0
    2862:	a1 f7       	brne	.-24     	; 0x284c <itoa+0x1c>
    2864:	16 f4       	brtc	.+4      	; 0x286a <itoa+0x3a>
    2866:	5d e2       	ldi	r21, 0x2D	; 45
    2868:	51 93       	st	Z+, r21
    286a:	10 82       	st	Z, r1
    286c:	c9 01       	movw	r24, r18
    286e:	0c 94 39 14 	jmp	0x2872	; 0x2872 <strrev>

00002872 <strrev>:
    2872:	dc 01       	movw	r26, r24
    2874:	fc 01       	movw	r30, r24
    2876:	67 2f       	mov	r22, r23
    2878:	71 91       	ld	r23, Z+
    287a:	77 23       	and	r23, r23
    287c:	e1 f7       	brne	.-8      	; 0x2876 <strrev+0x4>
    287e:	32 97       	sbiw	r30, 0x02	; 2
    2880:	04 c0       	rjmp	.+8      	; 0x288a <strrev+0x18>
    2882:	7c 91       	ld	r23, X
    2884:	6d 93       	st	X+, r22
    2886:	70 83       	st	Z, r23
    2888:	62 91       	ld	r22, -Z
    288a:	ae 17       	cp	r26, r30
    288c:	bf 07       	cpc	r27, r31
    288e:	c8 f3       	brcs	.-14     	; 0x2882 <strrev+0x10>
    2890:	08 95       	ret

00002892 <__udivmodhi4>:
    2892:	aa 1b       	sub	r26, r26
    2894:	bb 1b       	sub	r27, r27
    2896:	51 e1       	ldi	r21, 0x11	; 17
    2898:	07 c0       	rjmp	.+14     	; 0x28a8 <__udivmodhi4_ep>

0000289a <__udivmodhi4_loop>:
    289a:	aa 1f       	adc	r26, r26
    289c:	bb 1f       	adc	r27, r27
    289e:	a6 17       	cp	r26, r22
    28a0:	b7 07       	cpc	r27, r23
    28a2:	10 f0       	brcs	.+4      	; 0x28a8 <__udivmodhi4_ep>
    28a4:	a6 1b       	sub	r26, r22
    28a6:	b7 0b       	sbc	r27, r23

000028a8 <__udivmodhi4_ep>:
    28a8:	88 1f       	adc	r24, r24
    28aa:	99 1f       	adc	r25, r25
    28ac:	5a 95       	dec	r21
    28ae:	a9 f7       	brne	.-22     	; 0x289a <__udivmodhi4_loop>
    28b0:	80 95       	com	r24
    28b2:	90 95       	com	r25
    28b4:	bc 01       	movw	r22, r24
    28b6:	cd 01       	movw	r24, r26
    28b8:	08 95       	ret

000028ba <_exit>:
    28ba:	f8 94       	cli

000028bc <__stop_program>:
    28bc:	ff cf       	rjmp	.-2      	; 0x28bc <__stop_program>
